
getStartLab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005900  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08005ad0  08005ad0  00006ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c5c  08005c5c  000070bc  2**0
                  CONTENTS
  4 .ARM          00000008  08005c5c  08005c5c  00006c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c64  08005c64  000070bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c64  08005c64  00006c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c68  08005c68  00006c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08005c6c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf4  200000bc  08005d28  000070bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cb0  08005d28  00007cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b75  00000000  00000000  000070ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d9  00000000  00000000  0001fc61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00023140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001014  00000000  00000000  000245e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000332c  00000000  00000000  000255fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017759  00000000  00000000  00028928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daf63  00000000  00000000  00040081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011afe4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a00  00000000  00000000  0011b028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00120a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005ab8 	.word	0x08005ab8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c0 	.word	0x200000c0
 800020c:	08005ab8 	.word	0x08005ab8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000504:	f000 fbe0 	bl	8000cc8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000508:	f000 f85e 	bl	80005c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800050c:	f000 f8f8 	bl	8000700 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000510:	f000 f8cc 	bl	80006ac <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000514:	f002 fc38 	bl	8002d88 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of Task1 */
	Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000518:	4a19      	ldr	r2, [pc, #100]	@ (8000580 <main+0x80>)
 800051a:	2100      	movs	r1, #0
 800051c:	4819      	ldr	r0, [pc, #100]	@ (8000584 <main+0x84>)
 800051e:	f002 fc7d 	bl	8002e1c <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a18      	ldr	r2, [pc, #96]	@ (8000588 <main+0x88>)
 8000526:	6013      	str	r3, [r2, #0]

	/* creation of Task2 */
	Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000528:	4a18      	ldr	r2, [pc, #96]	@ (800058c <main+0x8c>)
 800052a:	2100      	movs	r1, #0
 800052c:	4818      	ldr	r0, [pc, #96]	@ (8000590 <main+0x90>)
 800052e:	f002 fc75 	bl	8002e1c <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a17      	ldr	r2, [pc, #92]	@ (8000594 <main+0x94>)
 8000536:	6013      	str	r3, [r2, #0]

	/* creation of Task3 */
	Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000538:	4a17      	ldr	r2, [pc, #92]	@ (8000598 <main+0x98>)
 800053a:	2100      	movs	r1, #0
 800053c:	4817      	ldr	r0, [pc, #92]	@ (800059c <main+0x9c>)
 800053e:	f002 fc6d 	bl	8002e1c <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a16      	ldr	r2, [pc, #88]	@ (80005a0 <main+0xa0>)
 8000546:	6013      	str	r3, [r2, #0]

	/* creation of Task4 */
	Task4Handle = osThreadNew(StartTask4, NULL, &Task4_attributes);
 8000548:	4a16      	ldr	r2, [pc, #88]	@ (80005a4 <main+0xa4>)
 800054a:	2100      	movs	r1, #0
 800054c:	4816      	ldr	r0, [pc, #88]	@ (80005a8 <main+0xa8>)
 800054e:	f002 fc65 	bl	8002e1c <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a15      	ldr	r2, [pc, #84]	@ (80005ac <main+0xac>)
 8000556:	6013      	str	r3, [r2, #0]

	/* creation of Task5 */
	Task5Handle = osThreadNew(StartTask5, NULL, &Task5_attributes);
 8000558:	4a15      	ldr	r2, [pc, #84]	@ (80005b0 <main+0xb0>)
 800055a:	2100      	movs	r1, #0
 800055c:	4815      	ldr	r0, [pc, #84]	@ (80005b4 <main+0xb4>)
 800055e:	f002 fc5d 	bl	8002e1c <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a14      	ldr	r2, [pc, #80]	@ (80005b8 <main+0xb8>)
 8000566:	6013      	str	r3, [r2, #0]

	/* creation of Task6 */
	Task6Handle = osThreadNew(StartTask6, NULL, &Task6_attributes);
 8000568:	4a14      	ldr	r2, [pc, #80]	@ (80005bc <main+0xbc>)
 800056a:	2100      	movs	r1, #0
 800056c:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <main+0xc0>)
 800056e:	f002 fc55 	bl	8002e1c <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a13      	ldr	r2, [pc, #76]	@ (80005c4 <main+0xc4>)
 8000576:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000578:	f002 fc2a 	bl	8002dd0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <main+0x7c>
 8000580:	08005b6c 	.word	0x08005b6c
 8000584:	080007e1 	.word	0x080007e1
 8000588:	20000120 	.word	0x20000120
 800058c:	08005b90 	.word	0x08005b90
 8000590:	0800083d 	.word	0x0800083d
 8000594:	20000124 	.word	0x20000124
 8000598:	08005bb4 	.word	0x08005bb4
 800059c:	080008ad 	.word	0x080008ad
 80005a0:	20000128 	.word	0x20000128
 80005a4:	08005bd8 	.word	0x08005bd8
 80005a8:	08000901 	.word	0x08000901
 80005ac:	2000012c 	.word	0x2000012c
 80005b0:	08005bfc 	.word	0x08005bfc
 80005b4:	0800095d 	.word	0x0800095d
 80005b8:	20000130 	.word	0x20000130
 80005bc:	08005c20 	.word	0x08005c20
 80005c0:	080009e5 	.word	0x080009e5
 80005c4:	20000134 	.word	0x20000134

080005c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2234      	movs	r2, #52	@ 0x34
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f005 f986 	bl	80058e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b2c      	ldr	r3, [pc, #176]	@ (80006a4 <SystemClock_Config+0xdc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	4a2b      	ldr	r2, [pc, #172]	@ (80006a4 <SystemClock_Config+0xdc>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fc:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <SystemClock_Config+0xdc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <SystemClock_Config+0xe0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a25      	ldr	r2, [pc, #148]	@ (80006a8 <SystemClock_Config+0xe0>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <SystemClock_Config+0xe0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800062c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000636:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800063c:	23b4      	movs	r3, #180	@ 0xb4
 800063e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000648:	2302      	movs	r3, #2
 800064a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fa09 	bl	8001a68 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x98>
		Error_Handler();
 800065c:	f000 f9dc 	bl	8000a18 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000660:	f000 fe36 	bl	80012d0 <HAL_PWREx_EnableOverDrive>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xa6>
		Error_Handler();
 800066a:	f000 f9d5 	bl	8000a18 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800067e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000684:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2105      	movs	r1, #5
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fe6f 	bl	8001370 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xd4>
		Error_Handler();
 8000698:	f000 f9be 	bl	8000a18 <Error_Handler>
	}
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	@ 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <MX_USART2_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f001 ff00 	bl	80024e8 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80006ee:	f000 f993 	bl	8000a18 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200000d8 	.word	0x200000d8
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	@ 0x28
 8000704:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b2e      	ldr	r3, [pc, #184]	@ (80007d4 <MX_GPIO_Init+0xd4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a2d      	ldr	r2, [pc, #180]	@ (80007d4 <MX_GPIO_Init+0xd4>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <MX_GPIO_Init+0xd4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <MX_GPIO_Init+0xd4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a26      	ldr	r2, [pc, #152]	@ (80007d4 <MX_GPIO_Init+0xd4>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_GPIO_Init+0xd4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b20      	ldr	r3, [pc, #128]	@ (80007d4 <MX_GPIO_Init+0xd4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a1f      	ldr	r2, [pc, #124]	@ (80007d4 <MX_GPIO_Init+0xd4>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_GPIO_Init+0xd4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_GPIO_Init+0xd4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a18      	ldr	r2, [pc, #96]	@ (80007d4 <MX_GPIO_Init+0xd4>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_GPIO_Init+0xd4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5,
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 800078c:	4812      	ldr	r0, [pc, #72]	@ (80007d8 <MX_GPIO_Init+0xd8>)
 800078e:	f000 fd6b 	bl	8001268 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000792:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000796:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	@ (80007dc <MX_GPIO_Init+0xdc>)
 80007a8:	f000 fbb2 	bl	8000f10 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB3 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80007ac:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 80007b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <MX_GPIO_Init+0xd8>)
 80007c6:	f000 fba3 	bl	8000f10 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	@ 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020400 	.word	0x40020400
 80007dc:	40020800 	.word	0x40020800

080007e0 <StartTask1>:
 * @brief  Function implementing the Task1 thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		HAL_UART_Transmit(&huart2, dataTask1, sizeof(dataTask1), 1000);
 80007e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ec:	2216      	movs	r2, #22
 80007ee:	4910      	ldr	r1, [pc, #64]	@ (8000830 <StartTask1+0x50>)
 80007f0:	4810      	ldr	r0, [pc, #64]	@ (8000834 <StartTask1+0x54>)
 80007f2:	f001 fec9 	bl	8002588 <HAL_UART_Transmit>
		// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

		// Turn OFF green LED for 12 seconds
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2110      	movs	r1, #16
 80007fa:	480f      	ldr	r0, [pc, #60]	@ (8000838 <StartTask1+0x58>)
 80007fc:	f000 fd34 	bl	8001268 <HAL_GPIO_WritePin>
		osDelay(12000);
 8000800:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 8000804:	f002 fb9c 	bl	8002f40 <osDelay>

		// Turn ON green LED for 10 seconds
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2110      	movs	r1, #16
 800080c:	480a      	ldr	r0, [pc, #40]	@ (8000838 <StartTask1+0x58>)
 800080e:	f000 fd2b 	bl	8001268 <HAL_GPIO_WritePin>
		osDelay(10000);
 8000812:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000816:	f002 fb93 	bl	8002f40 <osDelay>

		// Turn OFF green LED for 3 seconds
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2110      	movs	r1, #16
 800081e:	4806      	ldr	r0, [pc, #24]	@ (8000838 <StartTask1+0x58>)
 8000820:	f000 fd22 	bl	8001268 <HAL_GPIO_WritePin>
		osDelay(3000);
 8000824:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000828:	f002 fb8a 	bl	8002f40 <osDelay>
		HAL_UART_Transmit(&huart2, dataTask1, sizeof(dataTask1), 1000);
 800082c:	bf00      	nop
 800082e:	e7db      	b.n	80007e8 <StartTask1+0x8>
 8000830:	20000000 	.word	0x20000000
 8000834:	200000d8 	.word	0x200000d8
 8000838:	40020400 	.word	0x40020400

0800083c <StartTask2>:
 * @brief Function implementing the Task2 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask2 */
	/* Infinite loop */
	for (;;) {
		HAL_UART_Transmit(&huart2, dataTask2, sizeof(dataTask2), 1000);
 8000844:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000848:	221c      	movs	r2, #28
 800084a:	4915      	ldr	r1, [pc, #84]	@ (80008a0 <StartTask2+0x64>)
 800084c:	4815      	ldr	r0, [pc, #84]	@ (80008a4 <StartTask2+0x68>)
 800084e:	f001 fe9b 	bl	8002588 <HAL_UART_Transmit>

		// Turn OFF yellow LED for 10 seconds
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2120      	movs	r1, #32
 8000856:	4814      	ldr	r0, [pc, #80]	@ (80008a8 <StartTask2+0x6c>)
 8000858:	f000 fd06 	bl	8001268 <HAL_GPIO_WritePin>
		osDelay(10000);
 800085c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000860:	f002 fb6e 	bl	8002f40 <osDelay>

		// Turn ON yellow LED for 2 seconds
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2120      	movs	r1, #32
 8000868:	480f      	ldr	r0, [pc, #60]	@ (80008a8 <StartTask2+0x6c>)
 800086a:	f000 fcfd 	bl	8001268 <HAL_GPIO_WritePin>
		osDelay(2000);
 800086e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000872:	f002 fb65 	bl	8002f40 <osDelay>

		// Turn OFF yellow LED for 10 seconds
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	480b      	ldr	r0, [pc, #44]	@ (80008a8 <StartTask2+0x6c>)
 800087c:	f000 fcf4 	bl	8001268 <HAL_GPIO_WritePin>
		osDelay(10000);
 8000880:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000884:	f002 fb5c 	bl	8002f40 <osDelay>

		// Turn ON yellow LED for 3 seconds
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2120      	movs	r1, #32
 800088c:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <StartTask2+0x6c>)
 800088e:	f000 fceb 	bl	8001268 <HAL_GPIO_WritePin>
		osDelay(3000);
 8000892:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000896:	f002 fb53 	bl	8002f40 <osDelay>
		HAL_UART_Transmit(&huart2, dataTask2, sizeof(dataTask2), 1000);
 800089a:	bf00      	nop
 800089c:	e7d2      	b.n	8000844 <StartTask2+0x8>
 800089e:	bf00      	nop
 80008a0:	20000018 	.word	0x20000018
 80008a4:	200000d8 	.word	0x200000d8
 80008a8:	40020400 	.word	0x40020400

080008ac <StartTask3>:
 * @brief Function implementing the Task3 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask3 */
	/* Infinite loop */
	for (;;) {
		HAL_UART_Transmit(&huart2, dataTask3, sizeof(dataTask3), 1000);
 80008b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b8:	2228      	movs	r2, #40	@ 0x28
 80008ba:	490e      	ldr	r1, [pc, #56]	@ (80008f4 <StartTask3+0x48>)
 80008bc:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <StartTask3+0x4c>)
 80008be:	f001 fe63 	bl	8002588 <HAL_UART_Transmit>

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //Red LED
 80008c2:	2108      	movs	r1, #8
 80008c4:	480d      	ldr	r0, [pc, #52]	@ (80008fc <StartTask3+0x50>)
 80008c6:	f000 fce8 	bl	800129a <HAL_GPIO_TogglePin>


		// Turn ON red LED for 12 seconds
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2108      	movs	r1, #8
 80008ce:	480b      	ldr	r0, [pc, #44]	@ (80008fc <StartTask3+0x50>)
 80008d0:	f000 fcca 	bl	8001268 <HAL_GPIO_WritePin>
		osDelay(12000);
 80008d4:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 80008d8:	f002 fb32 	bl	8002f40 <osDelay>

		// Turn OFF yellow LED for 13 seconds
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2108      	movs	r1, #8
 80008e0:	4806      	ldr	r0, [pc, #24]	@ (80008fc <StartTask3+0x50>)
 80008e2:	f000 fcc1 	bl	8001268 <HAL_GPIO_WritePin>
		osDelay(13000);
 80008e6:	f243 20c8 	movw	r0, #13000	@ 0x32c8
 80008ea:	f002 fb29 	bl	8002f40 <osDelay>
		HAL_UART_Transmit(&huart2, dataTask3, sizeof(dataTask3), 1000);
 80008ee:	bf00      	nop
 80008f0:	e7e0      	b.n	80008b4 <StartTask3+0x8>
 80008f2:	bf00      	nop
 80008f4:	20000034 	.word	0x20000034
 80008f8:	200000d8 	.word	0x200000d8
 80008fc:	40020400 	.word	0x40020400

08000900 <StartTask4>:
 * @brief Function implementing the Task4 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask4 */
void StartTask4(void *argument) {
 8000900:	b5b0      	push	{r4, r5, r7, lr}
 8000902:	b08c      	sub	sp, #48	@ 0x30
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask4 */
	/* Infinite loop */
	for (;;) {
		uint8_t dataTask4[] = "Task 5: I toggle GPIOB pin 10.\r\n";
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <StartTask4+0x4c>)
 800090a:	f107 040c 	add.w	r4, r7, #12
 800090e:	461d      	mov	r5, r3
 8000910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000918:	682b      	ldr	r3, [r5, #0]
 800091a:	7023      	strb	r3, [r4, #0]
		if (flag) {
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <StartTask4+0x50>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00f      	beq.n	8000944 <StartTask4+0x44>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8000924:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000928:	480a      	ldr	r0, [pc, #40]	@ (8000954 <StartTask4+0x54>)
 800092a:	f000 fcb6 	bl	800129a <HAL_GPIO_TogglePin>
			flag = 0;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <StartTask4+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, dataTask4, sizeof(dataTask4), 1000);
 8000934:	f107 010c 	add.w	r1, r7, #12
 8000938:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093c:	2221      	movs	r2, #33	@ 0x21
 800093e:	4806      	ldr	r0, [pc, #24]	@ (8000958 <StartTask4+0x58>)
 8000940:	f001 fe22 	bl	8002588 <HAL_UART_Transmit>
		}
		osDelay(100);
 8000944:	2064      	movs	r0, #100	@ 0x64
 8000946:	f002 fafb 	bl	8002f40 <osDelay>
	for (;;) {
 800094a:	e7dd      	b.n	8000908 <StartTask4+0x8>
 800094c:	08005b00 	.word	0x08005b00
 8000950:	20000138 	.word	0x20000138
 8000954:	40020400 	.word	0x40020400
 8000958:	200000d8 	.word	0x200000d8

0800095c <StartTask5>:
 * @brief Function implementing the Task5 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask5 */
void StartTask5(void *argument) {
 800095c:	b5b0      	push	{r4, r5, r7, lr}
 800095e:	b08e      	sub	sp, #56	@ 0x38
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask5 */
	/* Infinite loop */
	for (;;) {
		uint8_t str1[] = "I am waiting push-button\r\n";
 8000964:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <StartTask5+0x74>)
 8000966:	f107 041c 	add.w	r4, r7, #28
 800096a:	461d      	mov	r5, r3
 800096c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000970:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000974:	c403      	stmia	r4!, {r0, r1}
 8000976:	8022      	strh	r2, [r4, #0]
 8000978:	3402      	adds	r4, #2
 800097a:	0c13      	lsrs	r3, r2, #16
 800097c:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, str1, sizeof(str1), 1000);
 800097e:	f107 011c 	add.w	r1, r7, #28
 8000982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000986:	221b      	movs	r2, #27
 8000988:	4812      	ldr	r0, [pc, #72]	@ (80009d4 <StartTask5+0x78>)
 800098a:	f001 fdfd 	bl	8002588 <HAL_UART_Transmit>
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800098e:	bf00      	nop
 8000990:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000994:	4810      	ldr	r0, [pc, #64]	@ (80009d8 <StartTask5+0x7c>)
 8000996:	f000 fc4f 	bl	8001238 <HAL_GPIO_ReadPin>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1f7      	bne.n	8000990 <StartTask5+0x34>
			;
		flag = 1;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <StartTask5+0x80>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
		uint8_t str2[] = "I got push-button\r\n";
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <StartTask5+0x84>)
 80009a8:	f107 0408 	add.w	r4, r7, #8
 80009ac:	461d      	mov	r5, r3
 80009ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b2:	682b      	ldr	r3, [r5, #0]
 80009b4:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 80009b6:	f107 0108 	add.w	r1, r7, #8
 80009ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009be:	2214      	movs	r2, #20
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <StartTask5+0x78>)
 80009c2:	f001 fde1 	bl	8002588 <HAL_UART_Transmit>
		osDelay(500);
 80009c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009ca:	f002 fab9 	bl	8002f40 <osDelay>
	for (;;) {
 80009ce:	e7c9      	b.n	8000964 <StartTask5+0x8>
 80009d0:	08005b24 	.word	0x08005b24
 80009d4:	200000d8 	.word	0x200000d8
 80009d8:	40020800 	.word	0x40020800
 80009dc:	20000138 	.word	0x20000138
 80009e0:	08005b40 	.word	0x08005b40

080009e4 <StartTask6>:
 * @brief Function implementing the Task6 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask6 */
void StartTask6(void *argument) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask6 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f002 faa7 	bl	8002f40 <osDelay>
 80009f2:	e7fb      	b.n	80009ec <StartTask6+0x8>

080009f4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d101      	bne.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a06:	f000 f981 	bl	8000d0c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40001000 	.word	0x40001000

08000a18 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <Error_Handler+0x8>

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_MspInit+0x54>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	4a11      	ldr	r2, [pc, #68]	@ (8000a78 <HAL_MspInit+0x54>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <HAL_MspInit+0x54>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <HAL_MspInit+0x54>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a78 <HAL_MspInit+0x54>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <HAL_MspInit+0x54>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	210f      	movs	r1, #15
 8000a66:	f06f 0001 	mvn.w	r0, #1
 8000a6a:	f000 fa27 	bl	8000ebc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	@ (8000b00 <HAL_UART_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12b      	bne.n	8000af6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a17      	ldr	r2, [pc, #92]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <HAL_UART_MspInit+0x8c>)
 8000af2:	f000 fa0d 	bl	8000f10 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	@ 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b33      	ldr	r3, [pc, #204]	@ (8000bf0 <HAL_InitTick+0xe4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	4a32      	ldr	r2, [pc, #200]	@ (8000bf0 <HAL_InitTick+0xe4>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2c:	4b30      	ldr	r3, [pc, #192]	@ (8000bf0 <HAL_InitTick+0xe4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b38:	f107 0210 	add.w	r2, r7, #16
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fd2e 	bl	80015a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d103      	bne.n	8000b5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b52:	f000 fcff 	bl	8001554 <HAL_RCC_GetPCLK1Freq>
 8000b56:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b58:	e004      	b.n	8000b64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b5a:	f000 fcfb 	bl	8001554 <HAL_RCC_GetPCLK1Freq>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b66:	4a23      	ldr	r2, [pc, #140]	@ (8000bf4 <HAL_InitTick+0xe8>)
 8000b68:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6c:	0c9b      	lsrs	r3, r3, #18
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b72:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	@ (8000bfc <HAL_InitTick+0xf0>)
 8000b76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b80:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b98:	4817      	ldr	r0, [pc, #92]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000b9a:	f001 fa03 	bl	8001fa4 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d11b      	bne.n	8000be4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bac:	4812      	ldr	r0, [pc, #72]	@ (8000bf8 <HAL_InitTick+0xec>)
 8000bae:	f001 fa53 	bl	8002058 <HAL_TIM_Base_Start_IT>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d111      	bne.n	8000be4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bc0:	2036      	movs	r0, #54	@ 0x36
 8000bc2:	f000 f997 	bl	8000ef4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d808      	bhi.n	8000bde <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	2036      	movs	r0, #54	@ 0x36
 8000bd2:	f000 f973 	bl	8000ebc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <HAL_InitTick+0xf4>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e002      	b.n	8000be4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000be4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3738      	adds	r7, #56	@ 0x38
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	2000013c 	.word	0x2000013c
 8000bfc:	40001000 	.word	0x40001000
 8000c00:	20000060 	.word	0x20000060

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <NMI_Handler+0x4>

08000c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c40:	4802      	ldr	r0, [pc, #8]	@ (8000c4c <TIM6_DAC_IRQHandler+0x10>)
 8000c42:	f001 fa79 	bl	8002138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000013c 	.word	0x2000013c

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c78:	f7ff ffea 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f004 fe7f 	bl	80059a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fc2b 	bl	8000500 <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8000cb8:	08005c6c 	.word	0x08005c6c
  ldr r2, =_sbss
 8000cbc:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8000cc0:	20004cb0 	.word	0x20004cb0

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <HAL_Init+0x40>)
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <HAL_Init+0x40>)
 8000cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	@ (8000d08 <HAL_Init+0x40>)
 8000cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f8d8 	bl	8000ea6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	200f      	movs	r0, #15
 8000cf8:	f7ff ff08 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fe92 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_IncTick+0x20>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x24>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <HAL_IncTick+0x24>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000064 	.word	0x20000064
 8000d30:	20000184 	.word	0x20000184

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000184 	.word	0x20000184

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db0b      	blt.n	8000dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 021f 	and.w	r2, r3, #31
 8000dc8:	4907      	ldr	r1, [pc, #28]	@ (8000de8 <__NVIC_EnableIRQ+0x38>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	@ (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	@ (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	@ 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff4c 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ece:	f7ff ff61 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000ed2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	6978      	ldr	r0, [r7, #20]
 8000eda:	f7ff ffb1 	bl	8000e40 <NVIC_EncodePriority>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff80 	bl	8000dec <__NVIC_SetPriority>
}
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff54 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	@ 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e165      	b.n	80011f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 8154 	bne.w	80011f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d005      	beq.n	8000f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80ae 	beq.w	80011f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b5d      	ldr	r3, [pc, #372]	@ (8001210 <HAL_GPIO_Init+0x300>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	4a5c      	ldr	r2, [pc, #368]	@ (8001210 <HAL_GPIO_Init+0x300>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001210 <HAL_GPIO_Init+0x300>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a58      	ldr	r2, [pc, #352]	@ (8001214 <HAL_GPIO_Init+0x304>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001218 <HAL_GPIO_Init+0x308>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d025      	beq.n	800112a <HAL_GPIO_Init+0x21a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	@ (800121c <HAL_GPIO_Init+0x30c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d01f      	beq.n	8001126 <HAL_GPIO_Init+0x216>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001220 <HAL_GPIO_Init+0x310>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d019      	beq.n	8001122 <HAL_GPIO_Init+0x212>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001224 <HAL_GPIO_Init+0x314>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0x20e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001228 <HAL_GPIO_Init+0x318>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00d      	beq.n	800111a <HAL_GPIO_Init+0x20a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4a      	ldr	r2, [pc, #296]	@ (800122c <HAL_GPIO_Init+0x31c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d007      	beq.n	8001116 <HAL_GPIO_Init+0x206>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a49      	ldr	r2, [pc, #292]	@ (8001230 <HAL_GPIO_Init+0x320>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_GPIO_Init+0x202>
 800110e:	2306      	movs	r3, #6
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001112:	2307      	movs	r3, #7
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	@ (8001214 <HAL_GPIO_Init+0x304>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b3a      	ldr	r3, [pc, #232]	@ (8001234 <HAL_GPIO_Init+0x324>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a31      	ldr	r2, [pc, #196]	@ (8001234 <HAL_GPIO_Init+0x324>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b2f      	ldr	r3, [pc, #188]	@ (8001234 <HAL_GPIO_Init+0x324>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a26      	ldr	r2, [pc, #152]	@ (8001234 <HAL_GPIO_Init+0x324>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119e:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <HAL_GPIO_Init+0x324>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001234 <HAL_GPIO_Init+0x324>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <HAL_GPIO_Init+0x324>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ec:	4a11      	ldr	r2, [pc, #68]	@ (8001234 <HAL_GPIO_Init+0x324>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae96 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	@ 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e001      	b.n	800125a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	041a      	lsls	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	041a      	lsls	r2, r3, #16
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	400b      	ands	r3, r1
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <HAL_PWREx_EnableOverDrive+0x90>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001360 <HAL_PWREx_EnableOverDrive+0x90>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <HAL_PWREx_EnableOverDrive+0x90>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <HAL_PWREx_EnableOverDrive+0x94>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012fc:	f7ff fd1a 	bl	8000d34 <HAL_GetTick>
 8001300:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001302:	e009      	b.n	8001318 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001304:	f7ff fd16 	bl	8000d34 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001312:	d901      	bls.n	8001318 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e01f      	b.n	8001358 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <HAL_PWREx_EnableOverDrive+0x98>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001324:	d1ee      	bne.n	8001304 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800132c:	f7ff fd02 	bl	8000d34 <HAL_GetTick>
 8001330:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001332:	e009      	b.n	8001348 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001334:	f7ff fcfe 	bl	8000d34 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001342:	d901      	bls.n	8001348 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e007      	b.n	8001358 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <HAL_PWREx_EnableOverDrive+0x98>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001350:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001354:	d1ee      	bne.n	8001334 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	420e0040 	.word	0x420e0040
 8001368:	40007000 	.word	0x40007000
 800136c:	420e0044 	.word	0x420e0044

08001370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0cc      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001384:	4b68      	ldr	r3, [pc, #416]	@ (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d90c      	bls.n	80013ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b65      	ldr	r3, [pc, #404]	@ (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139a:	4b63      	ldr	r3, [pc, #396]	@ (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0b8      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d020      	beq.n	80013fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013c4:	4b59      	ldr	r3, [pc, #356]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	4a58      	ldr	r2, [pc, #352]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013dc:	4b53      	ldr	r3, [pc, #332]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a52      	ldr	r2, [pc, #328]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e8:	4b50      	ldr	r3, [pc, #320]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	494d      	ldr	r1, [pc, #308]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d044      	beq.n	8001490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d107      	bne.n	800141e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b47      	ldr	r3, [pc, #284]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d119      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e07f      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d003      	beq.n	800142e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800142a:	2b03      	cmp	r3, #3
 800142c:	d107      	bne.n	800143e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142e:	4b3f      	ldr	r3, [pc, #252]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d109      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e06f      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143e:	4b3b      	ldr	r3, [pc, #236]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e067      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800144e:	4b37      	ldr	r3, [pc, #220]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f023 0203 	bic.w	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4934      	ldr	r1, [pc, #208]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 800145c:	4313      	orrs	r3, r2
 800145e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001460:	f7ff fc68 	bl	8000d34 <HAL_GetTick>
 8001464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001466:	e00a      	b.n	800147e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001468:	f7ff fc64 	bl	8000d34 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e04f      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147e:	4b2b      	ldr	r3, [pc, #172]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 020c 	and.w	r2, r3, #12
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	429a      	cmp	r2, r3
 800148e:	d1eb      	bne.n	8001468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001490:	4b25      	ldr	r3, [pc, #148]	@ (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d20c      	bcs.n	80014b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	4b22      	ldr	r3, [pc, #136]	@ (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e032      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4916      	ldr	r1, [pc, #88]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d009      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014e2:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	490e      	ldr	r1, [pc, #56]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014f6:	f000 f887 	bl	8001608 <HAL_RCC_GetSysClockFreq>
 80014fa:	4602      	mov	r2, r0
 80014fc:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	490a      	ldr	r1, [pc, #40]	@ (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 8001508:	5ccb      	ldrb	r3, [r1, r3]
 800150a:	fa22 f303 	lsr.w	r3, r2, r3
 800150e:	4a09      	ldr	r2, [pc, #36]	@ (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_RCC_ClockConfig+0x1c8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff faf8 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023c00 	.word	0x40023c00
 800152c:	40023800 	.word	0x40023800
 8001530:	08005c44 	.word	0x08005c44
 8001534:	2000005c 	.word	0x2000005c
 8001538:	20000060 	.word	0x20000060

0800153c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001540:	4b03      	ldr	r3, [pc, #12]	@ (8001550 <HAL_RCC_GetHCLKFreq+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	2000005c 	.word	0x2000005c

08001554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001558:	f7ff fff0 	bl	800153c <HAL_RCC_GetHCLKFreq>
 800155c:	4602      	mov	r2, r0
 800155e:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	0a9b      	lsrs	r3, r3, #10
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	4903      	ldr	r1, [pc, #12]	@ (8001578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800156a:	5ccb      	ldrb	r3, [r1, r3]
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001570:	4618      	mov	r0, r3
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	08005c54 	.word	0x08005c54

0800157c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001580:	f7ff ffdc 	bl	800153c <HAL_RCC_GetHCLKFreq>
 8001584:	4602      	mov	r2, r0
 8001586:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	0b5b      	lsrs	r3, r3, #13
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	4903      	ldr	r1, [pc, #12]	@ (80015a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001592:	5ccb      	ldrb	r3, [r1, r3]
 8001594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001598:	4618      	mov	r0, r3
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	08005c54 	.word	0x08005c54

080015a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	220f      	movs	r2, #15
 80015b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015b4:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_RCC_GetClockConfig+0x5c>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 0203 	and.w	r2, r3, #3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <HAL_RCC_GetClockConfig+0x5c>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <HAL_RCC_GetClockConfig+0x5c>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015d8:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <HAL_RCC_GetClockConfig+0x5c>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	08db      	lsrs	r3, r3, #3
 80015de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015e6:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <HAL_RCC_GetClockConfig+0x60>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 020f 	and.w	r2, r3, #15
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40023c00 	.word	0x40023c00

08001608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800160c:	b0ae      	sub	sp, #184	@ 0xb8
 800160e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800162e:	4bcb      	ldr	r3, [pc, #812]	@ (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b0c      	cmp	r3, #12
 8001638:	f200 8206 	bhi.w	8001a48 <HAL_RCC_GetSysClockFreq+0x440>
 800163c:	a201      	add	r2, pc, #4	@ (adr r2, 8001644 <HAL_RCC_GetSysClockFreq+0x3c>)
 800163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001642:	bf00      	nop
 8001644:	08001679 	.word	0x08001679
 8001648:	08001a49 	.word	0x08001a49
 800164c:	08001a49 	.word	0x08001a49
 8001650:	08001a49 	.word	0x08001a49
 8001654:	08001681 	.word	0x08001681
 8001658:	08001a49 	.word	0x08001a49
 800165c:	08001a49 	.word	0x08001a49
 8001660:	08001a49 	.word	0x08001a49
 8001664:	08001689 	.word	0x08001689
 8001668:	08001a49 	.word	0x08001a49
 800166c:	08001a49 	.word	0x08001a49
 8001670:	08001a49 	.word	0x08001a49
 8001674:	08001879 	.word	0x08001879
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001678:	4bb9      	ldr	r3, [pc, #740]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x358>)
 800167a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800167e:	e1e7      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001680:	4bb8      	ldr	r3, [pc, #736]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001682:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001686:	e1e3      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001688:	4bb4      	ldr	r3, [pc, #720]	@ (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001690:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001694:	4bb1      	ldr	r3, [pc, #708]	@ (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d071      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a0:	4bae      	ldr	r3, [pc, #696]	@ (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	2200      	movs	r2, #0
 80016a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80016ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80016b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80016c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016c6:	4622      	mov	r2, r4
 80016c8:	462b      	mov	r3, r5
 80016ca:	f04f 0000 	mov.w	r0, #0
 80016ce:	f04f 0100 	mov.w	r1, #0
 80016d2:	0159      	lsls	r1, r3, #5
 80016d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d8:	0150      	lsls	r0, r2, #5
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4621      	mov	r1, r4
 80016e0:	1a51      	subs	r1, r2, r1
 80016e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80016e4:	4629      	mov	r1, r5
 80016e6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80016f8:	4649      	mov	r1, r9
 80016fa:	018b      	lsls	r3, r1, #6
 80016fc:	4641      	mov	r1, r8
 80016fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001702:	4641      	mov	r1, r8
 8001704:	018a      	lsls	r2, r1, #6
 8001706:	4641      	mov	r1, r8
 8001708:	1a51      	subs	r1, r2, r1
 800170a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800170c:	4649      	mov	r1, r9
 800170e:	eb63 0301 	sbc.w	r3, r3, r1
 8001712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001720:	4649      	mov	r1, r9
 8001722:	00cb      	lsls	r3, r1, #3
 8001724:	4641      	mov	r1, r8
 8001726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800172a:	4641      	mov	r1, r8
 800172c:	00ca      	lsls	r2, r1, #3
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	4603      	mov	r3, r0
 8001734:	4622      	mov	r2, r4
 8001736:	189b      	adds	r3, r3, r2
 8001738:	633b      	str	r3, [r7, #48]	@ 0x30
 800173a:	462b      	mov	r3, r5
 800173c:	460a      	mov	r2, r1
 800173e:	eb42 0303 	adc.w	r3, r2, r3
 8001742:	637b      	str	r3, [r7, #52]	@ 0x34
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001750:	4629      	mov	r1, r5
 8001752:	024b      	lsls	r3, r1, #9
 8001754:	4621      	mov	r1, r4
 8001756:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800175a:	4621      	mov	r1, r4
 800175c:	024a      	lsls	r2, r1, #9
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001766:	2200      	movs	r2, #0
 8001768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800176c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001770:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001774:	f7fe fd4c 	bl	8000210 <__aeabi_uldivmod>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4613      	mov	r3, r2
 800177e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001782:	e067      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001784:	4b75      	ldr	r3, [pc, #468]	@ (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	2200      	movs	r2, #0
 800178c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001790:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001794:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800179c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800179e:	2300      	movs	r3, #0
 80017a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80017a6:	4622      	mov	r2, r4
 80017a8:	462b      	mov	r3, r5
 80017aa:	f04f 0000 	mov.w	r0, #0
 80017ae:	f04f 0100 	mov.w	r1, #0
 80017b2:	0159      	lsls	r1, r3, #5
 80017b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b8:	0150      	lsls	r0, r2, #5
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4621      	mov	r1, r4
 80017c0:	1a51      	subs	r1, r2, r1
 80017c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80017c4:	4629      	mov	r1, r5
 80017c6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80017d8:	4649      	mov	r1, r9
 80017da:	018b      	lsls	r3, r1, #6
 80017dc:	4641      	mov	r1, r8
 80017de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017e2:	4641      	mov	r1, r8
 80017e4:	018a      	lsls	r2, r1, #6
 80017e6:	4641      	mov	r1, r8
 80017e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80017ec:	4649      	mov	r1, r9
 80017ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001802:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001806:	4692      	mov	sl, r2
 8001808:	469b      	mov	fp, r3
 800180a:	4623      	mov	r3, r4
 800180c:	eb1a 0303 	adds.w	r3, sl, r3
 8001810:	623b      	str	r3, [r7, #32]
 8001812:	462b      	mov	r3, r5
 8001814:	eb4b 0303 	adc.w	r3, fp, r3
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001826:	4629      	mov	r1, r5
 8001828:	028b      	lsls	r3, r1, #10
 800182a:	4621      	mov	r1, r4
 800182c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001830:	4621      	mov	r1, r4
 8001832:	028a      	lsls	r2, r1, #10
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800183c:	2200      	movs	r2, #0
 800183e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001840:	677a      	str	r2, [r7, #116]	@ 0x74
 8001842:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001846:	f7fe fce3 	bl	8000210 <__aeabi_uldivmod>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4613      	mov	r3, r2
 8001850:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001854:	4b41      	ldr	r3, [pc, #260]	@ (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	3301      	adds	r3, #1
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800186a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001876:	e0eb      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001878:	4b38      	ldr	r3, [pc, #224]	@ (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001884:	4b35      	ldr	r3, [pc, #212]	@ (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d06b      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001890:	4b32      	ldr	r3, [pc, #200]	@ (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	2200      	movs	r2, #0
 8001898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800189a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800189c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800189e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80018a4:	2300      	movs	r3, #0
 80018a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80018a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80018ac:	4622      	mov	r2, r4
 80018ae:	462b      	mov	r3, r5
 80018b0:	f04f 0000 	mov.w	r0, #0
 80018b4:	f04f 0100 	mov.w	r1, #0
 80018b8:	0159      	lsls	r1, r3, #5
 80018ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018be:	0150      	lsls	r0, r2, #5
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4621      	mov	r1, r4
 80018c6:	1a51      	subs	r1, r2, r1
 80018c8:	61b9      	str	r1, [r7, #24]
 80018ca:	4629      	mov	r1, r5
 80018cc:	eb63 0301 	sbc.w	r3, r3, r1
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018de:	4659      	mov	r1, fp
 80018e0:	018b      	lsls	r3, r1, #6
 80018e2:	4651      	mov	r1, sl
 80018e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018e8:	4651      	mov	r1, sl
 80018ea:	018a      	lsls	r2, r1, #6
 80018ec:	4651      	mov	r1, sl
 80018ee:	ebb2 0801 	subs.w	r8, r2, r1
 80018f2:	4659      	mov	r1, fp
 80018f4:	eb63 0901 	sbc.w	r9, r3, r1
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001904:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001908:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800190c:	4690      	mov	r8, r2
 800190e:	4699      	mov	r9, r3
 8001910:	4623      	mov	r3, r4
 8001912:	eb18 0303 	adds.w	r3, r8, r3
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	462b      	mov	r3, r5
 800191a:	eb49 0303 	adc.w	r3, r9, r3
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800192c:	4629      	mov	r1, r5
 800192e:	024b      	lsls	r3, r1, #9
 8001930:	4621      	mov	r1, r4
 8001932:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001936:	4621      	mov	r1, r4
 8001938:	024a      	lsls	r2, r1, #9
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001942:	2200      	movs	r2, #0
 8001944:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001946:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001948:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800194c:	f7fe fc60 	bl	8000210 <__aeabi_uldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4613      	mov	r3, r2
 8001956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800195a:	e065      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x420>
 800195c:	40023800 	.word	0x40023800
 8001960:	00f42400 	.word	0x00f42400
 8001964:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001968:	4b3d      	ldr	r3, [pc, #244]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x458>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	099b      	lsrs	r3, r3, #6
 800196e:	2200      	movs	r2, #0
 8001970:	4618      	mov	r0, r3
 8001972:	4611      	mov	r1, r2
 8001974:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001978:	653b      	str	r3, [r7, #80]	@ 0x50
 800197a:	2300      	movs	r3, #0
 800197c:	657b      	str	r3, [r7, #84]	@ 0x54
 800197e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001982:	4642      	mov	r2, r8
 8001984:	464b      	mov	r3, r9
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0159      	lsls	r1, r3, #5
 8001990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001994:	0150      	lsls	r0, r2, #5
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4641      	mov	r1, r8
 800199c:	1a51      	subs	r1, r2, r1
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	4649      	mov	r1, r9
 80019a2:	eb63 0301 	sbc.w	r3, r3, r1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019b4:	4659      	mov	r1, fp
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	4651      	mov	r1, sl
 80019ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019be:	4651      	mov	r1, sl
 80019c0:	018a      	lsls	r2, r1, #6
 80019c2:	4651      	mov	r1, sl
 80019c4:	1a54      	subs	r4, r2, r1
 80019c6:	4659      	mov	r1, fp
 80019c8:	eb63 0501 	sbc.w	r5, r3, r1
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	00eb      	lsls	r3, r5, #3
 80019d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019da:	00e2      	lsls	r2, r4, #3
 80019dc:	4614      	mov	r4, r2
 80019de:	461d      	mov	r5, r3
 80019e0:	4643      	mov	r3, r8
 80019e2:	18e3      	adds	r3, r4, r3
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	464b      	mov	r3, r9
 80019e8:	eb45 0303 	adc.w	r3, r5, r3
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019fa:	4629      	mov	r1, r5
 80019fc:	028b      	lsls	r3, r1, #10
 80019fe:	4621      	mov	r1, r4
 8001a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a04:	4621      	mov	r1, r4
 8001a06:	028a      	lsls	r2, r1, #10
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a10:	2200      	movs	r2, #0
 8001a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a14:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a1a:	f7fe fbf9 	bl	8000210 <__aeabi_uldivmod>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4613      	mov	r3, r2
 8001a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a28:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	0f1b      	lsrs	r3, r3, #28
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a46:	e003      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	37b8      	adds	r7, #184	@ 0xb8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	00f42400 	.word	0x00f42400

08001a68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e28d      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8083 	beq.w	8001b8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a88:	4b94      	ldr	r3, [pc, #592]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d019      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a94:	4b91      	ldr	r3, [pc, #580]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001aa0:	4b8e      	ldr	r3, [pc, #568]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001aac:	d00c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aae:	4b8b      	ldr	r3, [pc, #556]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d112      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aba:	4b88      	ldr	r3, [pc, #544]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	4b84      	ldr	r3, [pc, #528]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d05b      	beq.n	8001b8c <HAL_RCC_OscConfig+0x124>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d157      	bne.n	8001b8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e25a      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCC_OscConfig+0x90>
 8001aea:	4b7c      	ldr	r3, [pc, #496]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7b      	ldr	r2, [pc, #492]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0xcc>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0xb4>
 8001b02:	4b76      	ldr	r3, [pc, #472]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a75      	ldr	r2, [pc, #468]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b73      	ldr	r3, [pc, #460]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a72      	ldr	r2, [pc, #456]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xcc>
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a6e      	ldr	r2, [pc, #440]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b6c      	ldr	r3, [pc, #432]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a6b      	ldr	r2, [pc, #428]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f8fa 	bl	8000d34 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f8f6 	bl	8000d34 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	@ 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e21f      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b61      	ldr	r3, [pc, #388]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0xdc>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f8e6 	bl	8000d34 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f8e2 	bl	8000d34 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	@ 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e20b      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	4b57      	ldr	r3, [pc, #348]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x104>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d06f      	beq.n	8001c7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b9a:	4b50      	ldr	r3, [pc, #320]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d017      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ba6:	4b4d      	ldr	r3, [pc, #308]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
        || \
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d105      	bne.n	8001bbe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bbe:	4b47      	ldr	r3, [pc, #284]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bc6:	2b0c      	cmp	r3, #12
 8001bc8:	d11c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bca:	4b44      	ldr	r3, [pc, #272]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d116      	bne.n	8001c04 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	4b41      	ldr	r3, [pc, #260]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_RCC_OscConfig+0x186>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e1d3      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bee:	4b3b      	ldr	r3, [pc, #236]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4937      	ldr	r1, [pc, #220]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	e03a      	b.n	8001c7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d020      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <HAL_RCC_OscConfig+0x278>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff f88f 	bl	8000d34 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff f88b 	bl	8000d34 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e1b4      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b28      	ldr	r3, [pc, #160]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4925      	ldr	r1, [pc, #148]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
 8001c4c:	e015      	b.n	8001c7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ce0 <HAL_RCC_OscConfig+0x278>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff f86e 	bl	8000d34 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5c:	f7ff f86a 	bl	8000d34 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e193      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d036      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d016      	beq.n	8001cbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_RCC_OscConfig+0x27c>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff f84e 	bl	8000d34 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff f84a 	bl	8000d34 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e173      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x234>
 8001cba:	e01b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cbc:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc2:	f7ff f837 	bl	8000d34 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	e00e      	b.n	8001ce8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff f833 	bl	8000d34 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d907      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e15c      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	42470000 	.word	0x42470000
 8001ce4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	4b8a      	ldr	r3, [pc, #552]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ea      	bne.n	8001cca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 8097 	beq.w	8001e30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d06:	4b83      	ldr	r3, [pc, #524]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10f      	bne.n	8001d32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b7f      	ldr	r3, [pc, #508]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d22:	4b7c      	ldr	r3, [pc, #496]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d32:	4b79      	ldr	r3, [pc, #484]	@ (8001f18 <HAL_RCC_OscConfig+0x4b0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d118      	bne.n	8001d70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3e:	4b76      	ldr	r3, [pc, #472]	@ (8001f18 <HAL_RCC_OscConfig+0x4b0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a75      	ldr	r2, [pc, #468]	@ (8001f18 <HAL_RCC_OscConfig+0x4b0>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4a:	f7fe fff3 	bl	8000d34 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d52:	f7fe ffef 	bl	8000d34 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e118      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d64:	4b6c      	ldr	r3, [pc, #432]	@ (8001f18 <HAL_RCC_OscConfig+0x4b0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x31e>
 8001d78:	4b66      	ldr	r3, [pc, #408]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7c:	4a65      	ldr	r2, [pc, #404]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d84:	e01c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x358>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x340>
 8001d8e:	4b61      	ldr	r3, [pc, #388]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d92:	4a60      	ldr	r2, [pc, #384]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d9a:	4b5e      	ldr	r3, [pc, #376]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9e:	4a5d      	ldr	r2, [pc, #372]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x358>
 8001da8:	4b5a      	ldr	r3, [pc, #360]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dac:	4a59      	ldr	r2, [pc, #356]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db4:	4b57      	ldr	r3, [pc, #348]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db8:	4a56      	ldr	r2, [pc, #344]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001dba:	f023 0304 	bic.w	r3, r3, #4
 8001dbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d015      	beq.n	8001df4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7fe ffb4 	bl	8000d34 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7fe ffb0 	bl	8000d34 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e0d7      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de6:	4b4b      	ldr	r3, [pc, #300]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0ee      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x368>
 8001df2:	e014      	b.n	8001e1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7fe ff9e 	bl	8000d34 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7fe ff9a 	bl	8000d34 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e0c1      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e12:	4b40      	ldr	r3, [pc, #256]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ee      	bne.n	8001dfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e24:	4b3b      	ldr	r3, [pc, #236]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	4a3a      	ldr	r2, [pc, #232]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001e2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80ad 	beq.w	8001f94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e3a:	4b36      	ldr	r3, [pc, #216]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d060      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d145      	bne.n	8001eda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4e:	4b33      	ldr	r3, [pc, #204]	@ (8001f1c <HAL_RCC_OscConfig+0x4b4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7fe ff6e 	bl	8000d34 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7fe ff6a 	bl	8000d34 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e093      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6e:	4b29      	ldr	r3, [pc, #164]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	019b      	lsls	r3, r3, #6
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	085b      	lsrs	r3, r3, #1
 8001e92:	3b01      	subs	r3, #1
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9c:	061b      	lsls	r3, r3, #24
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	071b      	lsls	r3, r3, #28
 8001ea6:	491b      	ldr	r1, [pc, #108]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eac:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <HAL_RCC_OscConfig+0x4b4>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7fe ff3f 	bl	8000d34 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eba:	f7fe ff3b 	bl	8000d34 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e064      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ecc:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x452>
 8001ed8:	e05c      	b.n	8001f94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eda:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <HAL_RCC_OscConfig+0x4b4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7fe ff28 	bl	8000d34 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7fe ff24 	bl	8000d34 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e04d      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x480>
 8001f06:	e045      	b.n	8001f94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e040      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40007000 	.word	0x40007000
 8001f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f20:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <HAL_RCC_OscConfig+0x538>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d030      	beq.n	8001f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d129      	bne.n	8001f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d122      	bne.n	8001f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f50:	4013      	ands	r3, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d119      	bne.n	8001f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d10f      	bne.n	8001f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e041      	b.n	800203a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f839 	bl	8002042 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	f000 f9c0 	bl	8002368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d001      	beq.n	8002070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e04e      	b.n	800210e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a23      	ldr	r2, [pc, #140]	@ (800211c <HAL_TIM_Base_Start_IT+0xc4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d022      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800209a:	d01d      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002120 <HAL_TIM_Base_Start_IT+0xc8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d018      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002124 <HAL_TIM_Base_Start_IT+0xcc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d013      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002128 <HAL_TIM_Base_Start_IT+0xd0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00e      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1b      	ldr	r2, [pc, #108]	@ (800212c <HAL_TIM_Base_Start_IT+0xd4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d009      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <HAL_TIM_Base_Start_IT+0xd8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d004      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a18      	ldr	r2, [pc, #96]	@ (8002134 <HAL_TIM_Base_Start_IT+0xdc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d111      	bne.n	80020fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d010      	beq.n	800210c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020fa:	e007      	b.n	800210c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40010000 	.word	0x40010000
 8002120:	40000400 	.word	0x40000400
 8002124:	40000800 	.word	0x40000800
 8002128:	40000c00 	.word	0x40000c00
 800212c:	40010400 	.word	0x40010400
 8002130:	40014000 	.word	0x40014000
 8002134:	40001800 	.word	0x40001800

08002138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d020      	beq.n	800219c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01b      	beq.n	800219c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0202 	mvn.w	r2, #2
 800216c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f8d2 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 8002188:	e005      	b.n	8002196 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8c4 	bl	8002318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f8d5 	bl	8002340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d020      	beq.n	80021e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01b      	beq.n	80021e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0204 	mvn.w	r2, #4
 80021b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2202      	movs	r2, #2
 80021be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f8ac 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 80021d4:	e005      	b.n	80021e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f89e 	bl	8002318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f8af 	bl	8002340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d020      	beq.n	8002234 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01b      	beq.n	8002234 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0208 	mvn.w	r2, #8
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2204      	movs	r2, #4
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f886 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f878 	bl	8002318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f889 	bl	8002340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d020      	beq.n	8002280 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0210 	mvn.w	r2, #16
 8002250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2208      	movs	r2, #8
 8002256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f860 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f852 	bl	8002318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f863 	bl	8002340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00c      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0201 	mvn.w	r2, #1
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fba8 	bl	80009f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00c      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80022c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f906 	bl	80024d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f834 	bl	8002354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00c      	beq.n	8002310 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0220 	mvn.w	r2, #32
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8d8 	bl	80024c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a46      	ldr	r2, [pc, #280]	@ (8002494 <TIM_Base_SetConfig+0x12c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d013      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002386:	d00f      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a43      	ldr	r2, [pc, #268]	@ (8002498 <TIM_Base_SetConfig+0x130>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d00b      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a42      	ldr	r2, [pc, #264]	@ (800249c <TIM_Base_SetConfig+0x134>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d007      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a41      	ldr	r2, [pc, #260]	@ (80024a0 <TIM_Base_SetConfig+0x138>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a40      	ldr	r2, [pc, #256]	@ (80024a4 <TIM_Base_SetConfig+0x13c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d108      	bne.n	80023ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a35      	ldr	r2, [pc, #212]	@ (8002494 <TIM_Base_SetConfig+0x12c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d02b      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c8:	d027      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a32      	ldr	r2, [pc, #200]	@ (8002498 <TIM_Base_SetConfig+0x130>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d023      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a31      	ldr	r2, [pc, #196]	@ (800249c <TIM_Base_SetConfig+0x134>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01f      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a30      	ldr	r2, [pc, #192]	@ (80024a0 <TIM_Base_SetConfig+0x138>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01b      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a2f      	ldr	r2, [pc, #188]	@ (80024a4 <TIM_Base_SetConfig+0x13c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d017      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a2e      	ldr	r2, [pc, #184]	@ (80024a8 <TIM_Base_SetConfig+0x140>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a2d      	ldr	r2, [pc, #180]	@ (80024ac <TIM_Base_SetConfig+0x144>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00f      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a2c      	ldr	r2, [pc, #176]	@ (80024b0 <TIM_Base_SetConfig+0x148>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00b      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a2b      	ldr	r2, [pc, #172]	@ (80024b4 <TIM_Base_SetConfig+0x14c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a2a      	ldr	r2, [pc, #168]	@ (80024b8 <TIM_Base_SetConfig+0x150>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d003      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a29      	ldr	r2, [pc, #164]	@ (80024bc <TIM_Base_SetConfig+0x154>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d108      	bne.n	800242c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a10      	ldr	r2, [pc, #64]	@ (8002494 <TIM_Base_SetConfig+0x12c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d003      	beq.n	8002460 <TIM_Base_SetConfig+0xf8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a12      	ldr	r2, [pc, #72]	@ (80024a4 <TIM_Base_SetConfig+0x13c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d103      	bne.n	8002468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f023 0201 	bic.w	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	611a      	str	r2, [r3, #16]
  }
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40010000 	.word	0x40010000
 8002498:	40000400 	.word	0x40000400
 800249c:	40000800 	.word	0x40000800
 80024a0:	40000c00 	.word	0x40000c00
 80024a4:	40010400 	.word	0x40010400
 80024a8:	40014000 	.word	0x40014000
 80024ac:	40014400 	.word	0x40014400
 80024b0:	40014800 	.word	0x40014800
 80024b4:	40001800 	.word	0x40001800
 80024b8:	40001c00 	.word	0x40001c00
 80024bc:	40002000 	.word	0x40002000

080024c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e042      	b.n	8002580 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fab4 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	@ 0x24
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800252a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f973 	bl	8002818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	@ 0x28
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d175      	bne.n	8002694 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_UART_Transmit+0x2c>
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e06e      	b.n	8002696 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2221      	movs	r2, #33	@ 0x21
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025c6:	f7fe fbb5 	bl	8000d34 <HAL_GetTick>
 80025ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	88fa      	ldrh	r2, [r7, #6]
 80025d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	88fa      	ldrh	r2, [r7, #6]
 80025d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025e0:	d108      	bne.n	80025f4 <HAL_UART_Transmit+0x6c>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d104      	bne.n	80025f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	e003      	b.n	80025fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025fc:	e02e      	b.n	800265c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	2180      	movs	r1, #128	@ 0x80
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f848 	bl	800269e <UART_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e03a      	b.n	8002696 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10b      	bne.n	800263e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002634:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	3302      	adds	r3, #2
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	e007      	b.n	800264e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	3301      	adds	r3, #1
 800264c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1cb      	bne.n	80025fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2200      	movs	r2, #0
 800266e:	2140      	movs	r1, #64	@ 0x40
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f814 	bl	800269e <UART_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e006      	b.n	8002696 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	e000      	b.n	8002696 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002694:	2302      	movs	r3, #2
  }
}
 8002696:	4618      	mov	r0, r3
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ae:	e03b      	b.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b6:	d037      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b8:	f7fe fb3c 	bl	8000d34 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	6a3a      	ldr	r2, [r7, #32]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d302      	bcc.n	80026ce <UART_WaitOnFlagUntilTimeout+0x30>
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e03a      	b.n	8002748 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d023      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b80      	cmp	r3, #128	@ 0x80
 80026e4:	d020      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b40      	cmp	r3, #64	@ 0x40
 80026ea:	d01d      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d116      	bne.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f81d 	bl	8002750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2208      	movs	r2, #8
 800271a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e00f      	b.n	8002748 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4013      	ands	r3, r2
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	429a      	cmp	r2, r3
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	429a      	cmp	r2, r3
 8002744:	d0b4      	beq.n	80026b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002750:	b480      	push	{r7}
 8002752:	b095      	sub	sp, #84	@ 0x54
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	330c      	adds	r3, #12
 800275e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002762:	e853 3f00 	ldrex	r3, [r3]
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800276e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	330c      	adds	r3, #12
 8002776:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002778:	643a      	str	r2, [r7, #64]	@ 0x40
 800277a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800277e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002780:	e841 2300 	strex	r3, r2, [r1]
 8002784:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e5      	bne.n	8002758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3314      	adds	r3, #20
 8002792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	e853 3f00 	ldrex	r3, [r3]
 800279a:	61fb      	str	r3, [r7, #28]
   return(result);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3314      	adds	r3, #20
 80027aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027b4:	e841 2300 	strex	r3, r2, [r1]
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1e5      	bne.n	800278c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d119      	bne.n	80027fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	330c      	adds	r3, #12
 80027ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	e853 3f00 	ldrex	r3, [r3]
 80027d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f023 0310 	bic.w	r3, r3, #16
 80027de:	647b      	str	r3, [r7, #68]	@ 0x44
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	330c      	adds	r3, #12
 80027e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027e8:	61ba      	str	r2, [r7, #24]
 80027ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	e841 2300 	strex	r3, r2, [r1]
 80027f4:	613b      	str	r3, [r7, #16]
   return(result);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e5      	bne.n	80027c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800280a:	bf00      	nop
 800280c:	3754      	adds	r7, #84	@ 0x54
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800281c:	b0c0      	sub	sp, #256	@ 0x100
 800281e:	af00      	add	r7, sp, #0
 8002820:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002834:	68d9      	ldr	r1, [r3, #12]
 8002836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	ea40 0301 	orr.w	r3, r0, r1
 8002840:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	431a      	orrs	r2, r3
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	431a      	orrs	r2, r3
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002870:	f021 010c 	bic.w	r1, r1, #12
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800287e:	430b      	orrs	r3, r1
 8002880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002892:	6999      	ldr	r1, [r3, #24]
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	ea40 0301 	orr.w	r3, r0, r1
 800289e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4b8f      	ldr	r3, [pc, #572]	@ (8002ae4 <UART_SetConfig+0x2cc>)
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d005      	beq.n	80028b8 <UART_SetConfig+0xa0>
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b8d      	ldr	r3, [pc, #564]	@ (8002ae8 <UART_SetConfig+0x2d0>)
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d104      	bne.n	80028c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028b8:	f7fe fe60 	bl	800157c <HAL_RCC_GetPCLK2Freq>
 80028bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028c0:	e003      	b.n	80028ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028c2:	f7fe fe47 	bl	8001554 <HAL_RCC_GetPCLK1Freq>
 80028c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028d4:	f040 810c 	bne.w	8002af0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028dc:	2200      	movs	r2, #0
 80028de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80028e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80028e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80028ea:	4622      	mov	r2, r4
 80028ec:	462b      	mov	r3, r5
 80028ee:	1891      	adds	r1, r2, r2
 80028f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80028f2:	415b      	adcs	r3, r3
 80028f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028fa:	4621      	mov	r1, r4
 80028fc:	eb12 0801 	adds.w	r8, r2, r1
 8002900:	4629      	mov	r1, r5
 8002902:	eb43 0901 	adc.w	r9, r3, r1
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291a:	4690      	mov	r8, r2
 800291c:	4699      	mov	r9, r3
 800291e:	4623      	mov	r3, r4
 8002920:	eb18 0303 	adds.w	r3, r8, r3
 8002924:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002928:	462b      	mov	r3, r5
 800292a:	eb49 0303 	adc.w	r3, r9, r3
 800292e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800293e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002942:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002946:	460b      	mov	r3, r1
 8002948:	18db      	adds	r3, r3, r3
 800294a:	653b      	str	r3, [r7, #80]	@ 0x50
 800294c:	4613      	mov	r3, r2
 800294e:	eb42 0303 	adc.w	r3, r2, r3
 8002952:	657b      	str	r3, [r7, #84]	@ 0x54
 8002954:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002958:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800295c:	f7fd fc58 	bl	8000210 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4b61      	ldr	r3, [pc, #388]	@ (8002aec <UART_SetConfig+0x2d4>)
 8002966:	fba3 2302 	umull	r2, r3, r3, r2
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	011c      	lsls	r4, r3, #4
 800296e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002972:	2200      	movs	r2, #0
 8002974:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002978:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800297c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002980:	4642      	mov	r2, r8
 8002982:	464b      	mov	r3, r9
 8002984:	1891      	adds	r1, r2, r2
 8002986:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002988:	415b      	adcs	r3, r3
 800298a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800298c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002990:	4641      	mov	r1, r8
 8002992:	eb12 0a01 	adds.w	sl, r2, r1
 8002996:	4649      	mov	r1, r9
 8002998:	eb43 0b01 	adc.w	fp, r3, r1
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029b0:	4692      	mov	sl, r2
 80029b2:	469b      	mov	fp, r3
 80029b4:	4643      	mov	r3, r8
 80029b6:	eb1a 0303 	adds.w	r3, sl, r3
 80029ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029be:	464b      	mov	r3, r9
 80029c0:	eb4b 0303 	adc.w	r3, fp, r3
 80029c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80029d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80029dc:	460b      	mov	r3, r1
 80029de:	18db      	adds	r3, r3, r3
 80029e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80029e2:	4613      	mov	r3, r2
 80029e4:	eb42 0303 	adc.w	r3, r2, r3
 80029e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80029ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80029f2:	f7fd fc0d 	bl	8000210 <__aeabi_uldivmod>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	4b3b      	ldr	r3, [pc, #236]	@ (8002aec <UART_SetConfig+0x2d4>)
 80029fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2264      	movs	r2, #100	@ 0x64
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	1acb      	subs	r3, r1, r3
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a12:	4b36      	ldr	r3, [pc, #216]	@ (8002aec <UART_SetConfig+0x2d4>)
 8002a14:	fba3 2302 	umull	r2, r3, r3, r2
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a20:	441c      	add	r4, r3
 8002a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a34:	4642      	mov	r2, r8
 8002a36:	464b      	mov	r3, r9
 8002a38:	1891      	adds	r1, r2, r2
 8002a3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a3c:	415b      	adcs	r3, r3
 8002a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a44:	4641      	mov	r1, r8
 8002a46:	1851      	adds	r1, r2, r1
 8002a48:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a4a:	4649      	mov	r1, r9
 8002a4c:	414b      	adcs	r3, r1
 8002a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	00cb      	lsls	r3, r1, #3
 8002a60:	4651      	mov	r1, sl
 8002a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a66:	4651      	mov	r1, sl
 8002a68:	00ca      	lsls	r2, r1, #3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4642      	mov	r2, r8
 8002a72:	189b      	adds	r3, r3, r2
 8002a74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a78:	464b      	mov	r3, r9
 8002a7a:	460a      	mov	r2, r1
 8002a7c:	eb42 0303 	adc.w	r3, r2, r3
 8002a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a98:	460b      	mov	r3, r1
 8002a9a:	18db      	adds	r3, r3, r3
 8002a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	eb42 0303 	adc.w	r3, r2, r3
 8002aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002aaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002aae:	f7fd fbaf 	bl	8000210 <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <UART_SetConfig+0x2d4>)
 8002ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	2164      	movs	r1, #100	@ 0x64
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	3332      	adds	r3, #50	@ 0x32
 8002aca:	4a08      	ldr	r2, [pc, #32]	@ (8002aec <UART_SetConfig+0x2d4>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	f003 0207 	and.w	r2, r3, #7
 8002ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4422      	add	r2, r4
 8002ade:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ae0:	e106      	b.n	8002cf0 <UART_SetConfig+0x4d8>
 8002ae2:	bf00      	nop
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af4:	2200      	movs	r2, #0
 8002af6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002afa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002afe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b02:	4642      	mov	r2, r8
 8002b04:	464b      	mov	r3, r9
 8002b06:	1891      	adds	r1, r2, r2
 8002b08:	6239      	str	r1, [r7, #32]
 8002b0a:	415b      	adcs	r3, r3
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b12:	4641      	mov	r1, r8
 8002b14:	1854      	adds	r4, r2, r1
 8002b16:	4649      	mov	r1, r9
 8002b18:	eb43 0501 	adc.w	r5, r3, r1
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	00eb      	lsls	r3, r5, #3
 8002b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b2a:	00e2      	lsls	r2, r4, #3
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	461d      	mov	r5, r3
 8002b30:	4643      	mov	r3, r8
 8002b32:	18e3      	adds	r3, r4, r3
 8002b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b38:	464b      	mov	r3, r9
 8002b3a:	eb45 0303 	adc.w	r3, r5, r3
 8002b3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b5e:	4629      	mov	r1, r5
 8002b60:	008b      	lsls	r3, r1, #2
 8002b62:	4621      	mov	r1, r4
 8002b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b68:	4621      	mov	r1, r4
 8002b6a:	008a      	lsls	r2, r1, #2
 8002b6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b70:	f7fd fb4e 	bl	8000210 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4b60      	ldr	r3, [pc, #384]	@ (8002cfc <UART_SetConfig+0x4e4>)
 8002b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	011c      	lsls	r4, r3, #4
 8002b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b94:	4642      	mov	r2, r8
 8002b96:	464b      	mov	r3, r9
 8002b98:	1891      	adds	r1, r2, r2
 8002b9a:	61b9      	str	r1, [r7, #24]
 8002b9c:	415b      	adcs	r3, r3
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	1851      	adds	r1, r2, r1
 8002ba8:	6139      	str	r1, [r7, #16]
 8002baa:	4649      	mov	r1, r9
 8002bac:	414b      	adcs	r3, r1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bbc:	4659      	mov	r1, fp
 8002bbe:	00cb      	lsls	r3, r1, #3
 8002bc0:	4651      	mov	r1, sl
 8002bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	00ca      	lsls	r2, r1, #3
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4642      	mov	r2, r8
 8002bd2:	189b      	adds	r3, r3, r2
 8002bd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bd8:	464b      	mov	r3, r9
 8002bda:	460a      	mov	r2, r1
 8002bdc:	eb42 0303 	adc.w	r3, r2, r3
 8002be0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	008b      	lsls	r3, r1, #2
 8002c00:	4641      	mov	r1, r8
 8002c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c06:	4641      	mov	r1, r8
 8002c08:	008a      	lsls	r2, r1, #2
 8002c0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c0e:	f7fd faff 	bl	8000210 <__aeabi_uldivmod>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	4b38      	ldr	r3, [pc, #224]	@ (8002cfc <UART_SetConfig+0x4e4>)
 8002c1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2264      	movs	r2, #100	@ 0x64
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	1acb      	subs	r3, r1, r3
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	3332      	adds	r3, #50	@ 0x32
 8002c2c:	4a33      	ldr	r2, [pc, #204]	@ (8002cfc <UART_SetConfig+0x4e4>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c38:	441c      	add	r4, r3
 8002c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c3e:	2200      	movs	r2, #0
 8002c40:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c42:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c48:	4642      	mov	r2, r8
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	1891      	adds	r1, r2, r2
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	415b      	adcs	r3, r3
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c58:	4641      	mov	r1, r8
 8002c5a:	1851      	adds	r1, r2, r1
 8002c5c:	6039      	str	r1, [r7, #0]
 8002c5e:	4649      	mov	r1, r9
 8002c60:	414b      	adcs	r3, r1
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c70:	4659      	mov	r1, fp
 8002c72:	00cb      	lsls	r3, r1, #3
 8002c74:	4651      	mov	r1, sl
 8002c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c7a:	4651      	mov	r1, sl
 8002c7c:	00ca      	lsls	r2, r1, #3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	4642      	mov	r2, r8
 8002c86:	189b      	adds	r3, r3, r2
 8002c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	460a      	mov	r2, r1
 8002c8e:	eb42 0303 	adc.w	r3, r2, r3
 8002c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cac:	4649      	mov	r1, r9
 8002cae:	008b      	lsls	r3, r1, #2
 8002cb0:	4641      	mov	r1, r8
 8002cb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cb6:	4641      	mov	r1, r8
 8002cb8:	008a      	lsls	r2, r1, #2
 8002cba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002cbe:	f7fd faa7 	bl	8000210 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <UART_SetConfig+0x4e4>)
 8002cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	2164      	movs	r1, #100	@ 0x64
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	3332      	adds	r3, #50	@ 0x32
 8002cda:	4a08      	ldr	r2, [pc, #32]	@ (8002cfc <UART_SetConfig+0x4e4>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	f003 020f 	and.w	r2, r3, #15
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4422      	add	r2, r4
 8002cee:	609a      	str	r2, [r3, #8]
}
 8002cf0:	bf00      	nop
 8002cf2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfc:	51eb851f 	.word	0x51eb851f

08002d00 <__NVIC_SetPriority>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	@ (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	@ (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002d58:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <SysTick_Handler+0x1c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002d5c:	f001 fd46 	bl	80047ec <xTaskGetSchedulerState>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d001      	beq.n	8002d6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002d66:	f002 fb3f 	bl	80053e8 <xPortSysTickHandler>
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010

08002d74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002d78:	2100      	movs	r1, #0
 8002d7a:	f06f 0004 	mvn.w	r0, #4
 8002d7e:	f7ff ffbf 	bl	8002d00 <__NVIC_SetPriority>
#endif
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d8e:	f3ef 8305 	mrs	r3, IPSR
 8002d92:	603b      	str	r3, [r7, #0]
  return(result);
 8002d94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002d9a:	f06f 0305 	mvn.w	r3, #5
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	e00c      	b.n	8002dbc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002da2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <osKernelInitialize+0x44>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002daa:	4b08      	ldr	r3, [pc, #32]	@ (8002dcc <osKernelInitialize+0x44>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	e002      	b.n	8002dbc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002dbc:	687b      	ldr	r3, [r7, #4]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000188 	.word	0x20000188

08002dd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dd6:	f3ef 8305 	mrs	r3, IPSR
 8002dda:	603b      	str	r3, [r7, #0]
  return(result);
 8002ddc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <osKernelStart+0x1a>
    stat = osErrorISR;
 8002de2:	f06f 0305 	mvn.w	r3, #5
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	e010      	b.n	8002e0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002dea:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <osKernelStart+0x48>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d109      	bne.n	8002e06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002df2:	f7ff ffbf 	bl	8002d74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002df6:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <osKernelStart+0x48>)
 8002df8:	2202      	movs	r2, #2
 8002dfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002dfc:	f001 f892 	bl	8003f24 <vTaskStartScheduler>
      stat = osOK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	e002      	b.n	8002e0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e0c:	687b      	ldr	r3, [r7, #4]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000188 	.word	0x20000188

08002e1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08e      	sub	sp, #56	@ 0x38
 8002e20:	af04      	add	r7, sp, #16
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e2c:	f3ef 8305 	mrs	r3, IPSR
 8002e30:	617b      	str	r3, [r7, #20]
  return(result);
 8002e32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d17e      	bne.n	8002f36 <osThreadNew+0x11a>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d07b      	beq.n	8002f36 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002e42:	2318      	movs	r3, #24
 8002e44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d045      	beq.n	8002ee2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <osThreadNew+0x48>
        name = attr->name;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <osThreadNew+0x6e>
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b38      	cmp	r3, #56	@ 0x38
 8002e7c:	d805      	bhi.n	8002e8a <osThreadNew+0x6e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <osThreadNew+0x72>
        return (NULL);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e054      	b.n	8002f38 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00e      	beq.n	8002ec4 <osThreadNew+0xa8>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2ba7      	cmp	r3, #167	@ 0xa7
 8002eac:	d90a      	bls.n	8002ec4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d006      	beq.n	8002ec4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <osThreadNew+0xa8>
        mem = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	e010      	b.n	8002ee6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10c      	bne.n	8002ee6 <osThreadNew+0xca>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d108      	bne.n	8002ee6 <osThreadNew+0xca>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d104      	bne.n	8002ee6 <osThreadNew+0xca>
          mem = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	e001      	b.n	8002ee6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d110      	bne.n	8002f0e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ef4:	9202      	str	r2, [sp, #8]
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	6a3a      	ldr	r2, [r7, #32]
 8002f00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fe1a 	bl	8003b3c <xTaskCreateStatic>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e013      	b.n	8002f36 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d110      	bne.n	8002f36 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	f107 0310 	add.w	r3, r7, #16
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fe68 	bl	8003bfc <xTaskCreate>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d001      	beq.n	8002f36 <osThreadNew+0x11a>
            hTask = NULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f36:	693b      	ldr	r3, [r7, #16]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3728      	adds	r7, #40	@ 0x28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f48:	f3ef 8305 	mrs	r3, IPSR
 8002f4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <osDelay+0x1c>
    stat = osErrorISR;
 8002f54:	f06f 0305 	mvn.w	r3, #5
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	e007      	b.n	8002f6c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 ffa6 	bl	8003eb8 <vTaskDelay>
    }
  }

  return (stat);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a07      	ldr	r2, [pc, #28]	@ (8002fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	4a06      	ldr	r2, [pc, #24]	@ (8002fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8002f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2280      	movs	r2, #128	@ 0x80
 8002f94:	601a      	str	r2, [r3, #0]
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	2000018c 	.word	0x2000018c
 8002fa8:	20000234 	.word	0x20000234

08002fac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4a07      	ldr	r2, [pc, #28]	@ (8002fd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002fbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4a06      	ldr	r2, [pc, #24]	@ (8002fdc <vApplicationGetTimerTaskMemory+0x30>)
 8002fc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fca:	601a      	str	r2, [r3, #0]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	20000434 	.word	0x20000434
 8002fdc:	200004dc 	.word	0x200004dc

08002fe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f103 0208 	add.w	r2, r3, #8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f103 0208 	add.w	r2, r3, #8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f103 0208 	add.w	r2, r3, #8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	601a      	str	r2, [r3, #0]
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d103      	bne.n	80030a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e00c      	b.n	80030bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3308      	adds	r3, #8
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e002      	b.n	80030b0 <vListInsert+0x2e>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d2f6      	bcs.n	80030aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	601a      	str	r2, [r3, #0]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6892      	ldr	r2, [r2, #8]
 800310a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6852      	ldr	r2, [r2, #4]
 8003114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	d103      	bne.n	8003128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	1e5a      	subs	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10b      	bne.n	8003174 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	e7fd      	b.n	8003170 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003174:	f002 f8a8 	bl	80052c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003180:	68f9      	ldr	r1, [r7, #12]
 8003182:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	441a      	add	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a4:	3b01      	subs	r3, #1
 80031a6:	68f9      	ldr	r1, [r7, #12]
 80031a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	441a      	add	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	22ff      	movs	r2, #255	@ 0xff
 80031b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	22ff      	movs	r2, #255	@ 0xff
 80031c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d114      	bne.n	80031f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01a      	beq.n	8003208 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3310      	adds	r3, #16
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 f942 	bl	8004460 <xTaskRemoveFromEventList>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d012      	beq.n	8003208 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <xQueueGenericReset+0xd0>)
 80031e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	e009      	b.n	8003208 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3310      	adds	r3, #16
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fef1 	bl	8002fe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3324      	adds	r3, #36	@ 0x24
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff feec 	bl	8002fe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003208:	f002 f890 	bl	800532c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800320c:	2301      	movs	r3, #1
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	e000ed04 	.word	0xe000ed04

0800321c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08e      	sub	sp, #56	@ 0x38
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	e7fd      	b.n	8003244 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10b      	bne.n	8003266 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	e7fd      	b.n	8003262 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <xQueueGenericCreateStatic+0x56>
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <xQueueGenericCreateStatic+0x5a>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <xQueueGenericCreateStatic+0x5c>
 8003276:	2300      	movs	r3, #0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800327c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	623b      	str	r3, [r7, #32]
}
 800328e:	bf00      	nop
 8003290:	bf00      	nop
 8003292:	e7fd      	b.n	8003290 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <xQueueGenericCreateStatic+0x84>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <xQueueGenericCreateStatic+0x88>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <xQueueGenericCreateStatic+0x8a>
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80032aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	61fb      	str	r3, [r7, #28]
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	e7fd      	b.n	80032be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032c2:	2350      	movs	r3, #80	@ 0x50
 80032c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b50      	cmp	r3, #80	@ 0x50
 80032ca:	d00b      	beq.n	80032e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80032cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	61bb      	str	r3, [r7, #24]
}
 80032de:	bf00      	nop
 80032e0:	bf00      	nop
 80032e2:	e7fd      	b.n	80032e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80032e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80032ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00d      	beq.n	800330c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80032fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	4613      	mov	r3, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f805 	bl	8003316 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800330c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800330e:	4618      	mov	r0, r3
 8003310:	3730      	adds	r7, #48	@ 0x30
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e002      	b.n	8003338 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003344:	2101      	movs	r1, #1
 8003346:	69b8      	ldr	r0, [r7, #24]
 8003348:	f7ff fefe 	bl	8003148 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08e      	sub	sp, #56	@ 0x38
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800336a:	2300      	movs	r3, #0
 800336c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <xQueueGenericSend+0x34>
	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800338a:	bf00      	nop
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d103      	bne.n	800339e <xQueueGenericSend+0x42>
 8003396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <xQueueGenericSend+0x46>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <xQueueGenericSend+0x48>
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <xQueueGenericSend+0x64>
	__asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d103      	bne.n	80033ce <xQueueGenericSend+0x72>
 80033c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <xQueueGenericSend+0x76>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <xQueueGenericSend+0x78>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10b      	bne.n	80033f0 <xQueueGenericSend+0x94>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	623b      	str	r3, [r7, #32]
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033f0:	f001 f9fc 	bl	80047ec <xTaskGetSchedulerState>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d102      	bne.n	8003400 <xQueueGenericSend+0xa4>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <xQueueGenericSend+0xa8>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <xQueueGenericSend+0xaa>
 8003404:	2300      	movs	r3, #0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10b      	bne.n	8003422 <xQueueGenericSend+0xc6>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	61fb      	str	r3, [r7, #28]
}
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	e7fd      	b.n	800341e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003422:	f001 ff51 	bl	80052c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800342a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342e:	429a      	cmp	r2, r3
 8003430:	d302      	bcc.n	8003438 <xQueueGenericSend+0xdc>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d129      	bne.n	800348c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800343e:	f000 fa0f 	bl	8003860 <prvCopyDataToQueue>
 8003442:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	2b00      	cmp	r3, #0
 800344a:	d010      	beq.n	800346e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800344c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344e:	3324      	adds	r3, #36	@ 0x24
 8003450:	4618      	mov	r0, r3
 8003452:	f001 f805 	bl	8004460 <xTaskRemoveFromEventList>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d013      	beq.n	8003484 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800345c:	4b3f      	ldr	r3, [pc, #252]	@ (800355c <xQueueGenericSend+0x200>)
 800345e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	e00a      	b.n	8003484 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800346e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003474:	4b39      	ldr	r3, [pc, #228]	@ (800355c <xQueueGenericSend+0x200>)
 8003476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003484:	f001 ff52 	bl	800532c <vPortExitCritical>
				return pdPASS;
 8003488:	2301      	movs	r3, #1
 800348a:	e063      	b.n	8003554 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003492:	f001 ff4b 	bl	800532c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003496:	2300      	movs	r3, #0
 8003498:	e05c      	b.n	8003554 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800349a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349c:	2b00      	cmp	r3, #0
 800349e:	d106      	bne.n	80034ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 f83f 	bl	8004528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034aa:	2301      	movs	r3, #1
 80034ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034ae:	f001 ff3d 	bl	800532c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034b2:	f000 fda7 	bl	8004004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034b6:	f001 ff07 	bl	80052c8 <vPortEnterCritical>
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034c0:	b25b      	sxtb	r3, r3
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d103      	bne.n	80034d0 <xQueueGenericSend+0x174>
 80034c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034d6:	b25b      	sxtb	r3, r3
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d103      	bne.n	80034e6 <xQueueGenericSend+0x18a>
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034e6:	f001 ff21 	bl	800532c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ea:	1d3a      	adds	r2, r7, #4
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f001 f82e 	bl	8004554 <xTaskCheckForTimeOut>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d124      	bne.n	8003548 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003500:	f000 faa6 	bl	8003a50 <prvIsQueueFull>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d018      	beq.n	800353c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800350a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350c:	3310      	adds	r3, #16
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f000 ff52 	bl	80043bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003518:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800351a:	f000 fa31 	bl	8003980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800351e:	f000 fd7f 	bl	8004020 <xTaskResumeAll>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	f47f af7c 	bne.w	8003422 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800352a:	4b0c      	ldr	r3, [pc, #48]	@ (800355c <xQueueGenericSend+0x200>)
 800352c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	e772      	b.n	8003422 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800353c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800353e:	f000 fa1f 	bl	8003980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003542:	f000 fd6d 	bl	8004020 <xTaskResumeAll>
 8003546:	e76c      	b.n	8003422 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800354a:	f000 fa19 	bl	8003980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800354e:	f000 fd67 	bl	8004020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003554:	4618      	mov	r0, r3
 8003556:	3738      	adds	r7, #56	@ 0x38
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	e000ed04 	.word	0xe000ed04

08003560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b090      	sub	sp, #64	@ 0x40
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800358a:	bf00      	nop
 800358c:	bf00      	nop
 800358e:	e7fd      	b.n	800358c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d103      	bne.n	800359e <xQueueGenericSendFromISR+0x3e>
 8003596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <xQueueGenericSendFromISR+0x42>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <xQueueGenericSendFromISR+0x44>
 80035a2:	2300      	movs	r3, #0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	e7fd      	b.n	80035bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d103      	bne.n	80035ce <xQueueGenericSendFromISR+0x6e>
 80035c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <xQueueGenericSendFromISR+0x72>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <xQueueGenericSendFromISR+0x74>
 80035d2:	2300      	movs	r3, #0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	623b      	str	r3, [r7, #32]
}
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	e7fd      	b.n	80035ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035f0:	f001 ff4a 	bl	8005488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035f4:	f3ef 8211 	mrs	r2, BASEPRI
 80035f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	61fa      	str	r2, [r7, #28]
 800360a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800360c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800360e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <xQueueGenericSendFromISR+0xc2>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d12f      	bne.n	8003682 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003624:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003628:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800362c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800362e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003630:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003638:	f000 f912 	bl	8003860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800363c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d112      	bne.n	800366c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	2b00      	cmp	r3, #0
 800364c:	d016      	beq.n	800367c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800364e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003650:	3324      	adds	r3, #36	@ 0x24
 8003652:	4618      	mov	r0, r3
 8003654:	f000 ff04 	bl	8004460 <xTaskRemoveFromEventList>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00e      	beq.n	800367c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e007      	b.n	800367c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800366c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003670:	3301      	adds	r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	b25a      	sxtb	r2, r3
 8003676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800367c:	2301      	movs	r3, #1
 800367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003680:	e001      	b.n	8003686 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003682:	2300      	movs	r3, #0
 8003684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003688:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003690:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003694:	4618      	mov	r0, r3
 8003696:	3740      	adds	r7, #64	@ 0x40
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08c      	sub	sp, #48	@ 0x30
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10b      	bne.n	80036ce <xQueueReceive+0x32>
	__asm volatile
 80036b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	623b      	str	r3, [r7, #32]
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	e7fd      	b.n	80036ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d103      	bne.n	80036dc <xQueueReceive+0x40>
 80036d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <xQueueReceive+0x44>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <xQueueReceive+0x46>
 80036e0:	2300      	movs	r3, #0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10b      	bne.n	80036fe <xQueueReceive+0x62>
	__asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	61fb      	str	r3, [r7, #28]
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	e7fd      	b.n	80036fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036fe:	f001 f875 	bl	80047ec <xTaskGetSchedulerState>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <xQueueReceive+0x72>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <xQueueReceive+0x76>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <xQueueReceive+0x78>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <xQueueReceive+0x94>
	__asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	61bb      	str	r3, [r7, #24]
}
 800372a:	bf00      	nop
 800372c:	bf00      	nop
 800372e:	e7fd      	b.n	800372c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003730:	f001 fdca 	bl	80052c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01f      	beq.n	8003780 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003744:	f000 f8f6 	bl	8003934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	1e5a      	subs	r2, r3, #1
 800374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00f      	beq.n	8003778 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375a:	3310      	adds	r3, #16
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fe7f 	bl	8004460 <xTaskRemoveFromEventList>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003768:	4b3c      	ldr	r3, [pc, #240]	@ (800385c <xQueueReceive+0x1c0>)
 800376a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003778:	f001 fdd8 	bl	800532c <vPortExitCritical>
				return pdPASS;
 800377c:	2301      	movs	r3, #1
 800377e:	e069      	b.n	8003854 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003786:	f001 fdd1 	bl	800532c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800378a:	2300      	movs	r3, #0
 800378c:	e062      	b.n	8003854 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800378e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003794:	f107 0310 	add.w	r3, r7, #16
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fec5 	bl	8004528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800379e:	2301      	movs	r3, #1
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037a2:	f001 fdc3 	bl	800532c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037a6:	f000 fc2d 	bl	8004004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037aa:	f001 fd8d 	bl	80052c8 <vPortEnterCritical>
 80037ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037b4:	b25b      	sxtb	r3, r3
 80037b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ba:	d103      	bne.n	80037c4 <xQueueReceive+0x128>
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d103      	bne.n	80037da <xQueueReceive+0x13e>
 80037d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037da:	f001 fda7 	bl	800532c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037de:	1d3a      	adds	r2, r7, #4
 80037e0:	f107 0310 	add.w	r3, r7, #16
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 feb4 	bl	8004554 <xTaskCheckForTimeOut>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d123      	bne.n	800383a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037f4:	f000 f916 	bl	8003a24 <prvIsQueueEmpty>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d017      	beq.n	800382e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003800:	3324      	adds	r3, #36	@ 0x24
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fdd8 	bl	80043bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800380c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800380e:	f000 f8b7 	bl	8003980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003812:	f000 fc05 	bl	8004020 <xTaskResumeAll>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d189      	bne.n	8003730 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800381c:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <xQueueReceive+0x1c0>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	e780      	b.n	8003730 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800382e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003830:	f000 f8a6 	bl	8003980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003834:	f000 fbf4 	bl	8004020 <xTaskResumeAll>
 8003838:	e77a      	b.n	8003730 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800383a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800383c:	f000 f8a0 	bl	8003980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003840:	f000 fbee 	bl	8004020 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003846:	f000 f8ed 	bl	8003a24 <prvIsQueueEmpty>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	f43f af6f 	beq.w	8003730 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003852:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003854:	4618      	mov	r0, r3
 8003856:	3730      	adds	r7, #48	@ 0x30
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	e000ed04 	.word	0xe000ed04

08003860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10d      	bne.n	800389a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d14d      	bne.n	8003922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 ffcc 	bl	8004828 <xTaskPriorityDisinherit>
 8003890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	e043      	b.n	8003922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d119      	bne.n	80038d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6858      	ldr	r0, [r3, #4]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	461a      	mov	r2, r3
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	f002 f8a0 	bl	80059f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	441a      	add	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d32b      	bcc.n	8003922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	e026      	b.n	8003922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68d8      	ldr	r0, [r3, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	461a      	mov	r2, r3
 80038de:	68b9      	ldr	r1, [r7, #8]
 80038e0:	f002 f886 	bl	80059f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ec:	425b      	negs	r3, r3
 80038ee:	441a      	add	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d207      	bcs.n	8003910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	425b      	negs	r3, r3
 800390a:	441a      	add	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d105      	bne.n	8003922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	3b01      	subs	r3, #1
 8003920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800392a:	697b      	ldr	r3, [r7, #20]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d018      	beq.n	8003978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	441a      	add	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	429a      	cmp	r2, r3
 800395e:	d303      	bcc.n	8003968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68d9      	ldr	r1, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	461a      	mov	r2, r3
 8003972:	6838      	ldr	r0, [r7, #0]
 8003974:	f002 f83c 	bl	80059f0 <memcpy>
	}
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003988:	f001 fc9e 	bl	80052c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003994:	e011      	b.n	80039ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	2b00      	cmp	r3, #0
 800399c:	d012      	beq.n	80039c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3324      	adds	r3, #36	@ 0x24
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fd5c 	bl	8004460 <xTaskRemoveFromEventList>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039ae:	f000 fe35 	bl	800461c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	dce9      	bgt.n	8003996 <prvUnlockQueue+0x16>
 80039c2:	e000      	b.n	80039c6 <prvUnlockQueue+0x46>
					break;
 80039c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	22ff      	movs	r2, #255	@ 0xff
 80039ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80039ce:	f001 fcad 	bl	800532c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039d2:	f001 fc79 	bl	80052c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039de:	e011      	b.n	8003a04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d012      	beq.n	8003a0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3310      	adds	r3, #16
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fd37 	bl	8004460 <xTaskRemoveFromEventList>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039f8:	f000 fe10 	bl	800461c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039fc:	7bbb      	ldrb	r3, [r7, #14]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	dce9      	bgt.n	80039e0 <prvUnlockQueue+0x60>
 8003a0c:	e000      	b.n	8003a10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	22ff      	movs	r2, #255	@ 0xff
 8003a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003a18:	f001 fc88 	bl	800532c <vPortExitCritical>
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a2c:	f001 fc4c 	bl	80052c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	e001      	b.n	8003a42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a42:	f001 fc73 	bl	800532c <vPortExitCritical>

	return xReturn;
 8003a46:	68fb      	ldr	r3, [r7, #12]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a58:	f001 fc36 	bl	80052c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d102      	bne.n	8003a6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e001      	b.n	8003a72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a72:	f001 fc5b 	bl	800532c <vPortExitCritical>

	return xReturn;
 8003a76:	68fb      	ldr	r3, [r7, #12]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e014      	b.n	8003aba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a90:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad0 <vQueueAddToRegistry+0x50>)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10b      	bne.n	8003ab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a9c:	490c      	ldr	r1, [pc, #48]	@ (8003ad0 <vQueueAddToRegistry+0x50>)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <vQueueAddToRegistry+0x50>)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ab2:	e006      	b.n	8003ac2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b07      	cmp	r3, #7
 8003abe:	d9e7      	bls.n	8003a90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	200008dc 	.word	0x200008dc

08003ad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ae4:	f001 fbf0 	bl	80052c8 <vPortEnterCritical>
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003aee:	b25b      	sxtb	r3, r3
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d103      	bne.n	8003afe <vQueueWaitForMessageRestricted+0x2a>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b04:	b25b      	sxtb	r3, r3
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0a:	d103      	bne.n	8003b14 <vQueueWaitForMessageRestricted+0x40>
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b14:	f001 fc0a 	bl	800532c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	3324      	adds	r3, #36	@ 0x24
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fc6d 	bl	8004408 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff ff26 	bl	8003980 <prvUnlockQueue>
	}
 8003b34:	bf00      	nop
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08e      	sub	sp, #56	@ 0x38
 8003b40:	af04      	add	r7, sp, #16
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	623b      	str	r3, [r7, #32]
}
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10b      	bne.n	8003b86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	61fb      	str	r3, [r7, #28]
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	e7fd      	b.n	8003b82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b86:	23a8      	movs	r3, #168	@ 0xa8
 8003b88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2ba8      	cmp	r3, #168	@ 0xa8
 8003b8e:	d00b      	beq.n	8003ba8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	61bb      	str	r3, [r7, #24]
}
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
 8003ba6:	e7fd      	b.n	8003ba4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ba8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01e      	beq.n	8003bee <xTaskCreateStatic+0xb2>
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01b      	beq.n	8003bee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bc8:	2300      	movs	r3, #0
 8003bca:	9303      	str	r3, [sp, #12]
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	9302      	str	r3, [sp, #8]
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f851 	bl	8003c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003be6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003be8:	f000 f8f6 	bl	8003dd8 <prvAddNewTaskToReadyList>
 8003bec:	e001      	b.n	8003bf2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003bf2:	697b      	ldr	r3, [r7, #20]
	}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3728      	adds	r7, #40	@ 0x28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	@ 0x30
 8003c00:	af04      	add	r7, sp, #16
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 fc7b 	bl	800550c <pvPortMalloc>
 8003c16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00e      	beq.n	8003c3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c1e:	20a8      	movs	r0, #168	@ 0xa8
 8003c20:	f001 fc74 	bl	800550c <pvPortMalloc>
 8003c24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c32:	e005      	b.n	8003c40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c34:	6978      	ldr	r0, [r7, #20]
 8003c36:	f001 fd37 	bl	80056a8 <vPortFree>
 8003c3a:	e001      	b.n	8003c40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d017      	beq.n	8003c76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	2300      	movs	r3, #0
 8003c52:	9303      	str	r3, [sp, #12]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	9302      	str	r3, [sp, #8]
 8003c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f80f 	bl	8003c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c6a:	69f8      	ldr	r0, [r7, #28]
 8003c6c:	f000 f8b4 	bl	8003dd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c70:	2301      	movs	r3, #1
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	e002      	b.n	8003c7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c7c:	69bb      	ldr	r3, [r7, #24]
	}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	21a5      	movs	r1, #165	@ 0xa5
 8003ca2:	f001 fe21 	bl	80058e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f023 0307 	bic.w	r3, r3, #7
 8003cbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00b      	beq.n	8003ce2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	617b      	str	r3, [r7, #20]
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	e7fd      	b.n	8003cde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01f      	beq.n	8003d28 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
 8003cec:	e012      	b.n	8003d14 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	7819      	ldrb	r1, [r3, #0]
 8003cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3334      	adds	r3, #52	@ 0x34
 8003cfe:	460a      	mov	r2, r1
 8003d00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	4413      	add	r3, r2
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d006      	beq.n	8003d1c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3301      	adds	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	2b0f      	cmp	r3, #15
 8003d18:	d9e9      	bls.n	8003cee <prvInitialiseNewTask+0x66>
 8003d1a:	e000      	b.n	8003d1e <prvInitialiseNewTask+0x96>
			{
				break;
 8003d1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d26:	e003      	b.n	8003d30 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d32:	2b37      	cmp	r3, #55	@ 0x37
 8003d34:	d901      	bls.n	8003d3a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d36:	2337      	movs	r3, #55	@ 0x37
 8003d38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d48:	2200      	movs	r2, #0
 8003d4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff f965 	bl	8003020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d58:	3318      	adds	r3, #24
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff f960 	bl	8003020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d88:	3354      	adds	r3, #84	@ 0x54
 8003d8a:	224c      	movs	r2, #76	@ 0x4c
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 fdaa 	bl	80058e8 <memset>
 8003d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d96:	4a0d      	ldr	r2, [pc, #52]	@ (8003dcc <prvInitialiseNewTask+0x144>)
 8003d98:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd0 <prvInitialiseNewTask+0x148>)
 8003d9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da2:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd4 <prvInitialiseNewTask+0x14c>)
 8003da4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	68f9      	ldr	r1, [r7, #12]
 8003daa:	69b8      	ldr	r0, [r7, #24]
 8003dac:	f001 f95a 	bl	8005064 <pxPortInitialiseStack>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dc2:	bf00      	nop
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20004b70 	.word	0x20004b70
 8003dd0:	20004bd8 	.word	0x20004bd8
 8003dd4:	20004c40 	.word	0x20004c40

08003dd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003de0:	f001 fa72 	bl	80052c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003de4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e9c <prvAddNewTaskToReadyList+0xc4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	4a2c      	ldr	r2, [pc, #176]	@ (8003e9c <prvAddNewTaskToReadyList+0xc4>)
 8003dec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dee:	4b2c      	ldr	r3, [pc, #176]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003df6:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dfc:	4b27      	ldr	r3, [pc, #156]	@ (8003e9c <prvAddNewTaskToReadyList+0xc4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d110      	bne.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e04:	f000 fc2e 	bl	8004664 <prvInitialiseTaskLists>
 8003e08:	e00d      	b.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ea4 <prvAddNewTaskToReadyList+0xcc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e12:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d802      	bhi.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e20:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e26:	4b20      	ldr	r3, [pc, #128]	@ (8003ea8 <prvAddNewTaskToReadyList+0xd0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea8 <prvAddNewTaskToReadyList+0xd0>)
 8003e2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea8 <prvAddNewTaskToReadyList+0xd0>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003eac <prvAddNewTaskToReadyList+0xd4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d903      	bls.n	8003e4c <prvAddNewTaskToReadyList+0x74>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	4a18      	ldr	r2, [pc, #96]	@ (8003eac <prvAddNewTaskToReadyList+0xd4>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4a15      	ldr	r2, [pc, #84]	@ (8003eb0 <prvAddNewTaskToReadyList+0xd8>)
 8003e5a:	441a      	add	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	4610      	mov	r0, r2
 8003e64:	f7ff f8e9 	bl	800303a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e68:	f001 fa60 	bl	800532c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea4 <prvAddNewTaskToReadyList+0xcc>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00e      	beq.n	8003e92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d207      	bcs.n	8003e92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e82:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <prvAddNewTaskToReadyList+0xdc>)
 8003e84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000df0 	.word	0x20000df0
 8003ea0:	2000091c 	.word	0x2000091c
 8003ea4:	20000dfc 	.word	0x20000dfc
 8003ea8:	20000e0c 	.word	0x20000e0c
 8003eac:	20000df8 	.word	0x20000df8
 8003eb0:	20000920 	.word	0x20000920
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d018      	beq.n	8003efc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003eca:	4b14      	ldr	r3, [pc, #80]	@ (8003f1c <vTaskDelay+0x64>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <vTaskDelay+0x32>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	60bb      	str	r3, [r7, #8]
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	e7fd      	b.n	8003ee6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003eea:	f000 f88b 	bl	8004004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003eee:	2100      	movs	r1, #0
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fd09 	bl	8004908 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ef6:	f000 f893 	bl	8004020 <xTaskResumeAll>
 8003efa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d107      	bne.n	8003f12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003f02:	4b07      	ldr	r3, [pc, #28]	@ (8003f20 <vTaskDelay+0x68>)
 8003f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000e18 	.word	0x20000e18
 8003f20:	e000ed04 	.word	0xe000ed04

08003f24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	@ 0x28
 8003f28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f32:	463a      	mov	r2, r7
 8003f34:	1d39      	adds	r1, r7, #4
 8003f36:	f107 0308 	add.w	r3, r7, #8
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff f81c 	bl	8002f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	9202      	str	r2, [sp, #8]
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	460a      	mov	r2, r1
 8003f52:	4924      	ldr	r1, [pc, #144]	@ (8003fe4 <vTaskStartScheduler+0xc0>)
 8003f54:	4824      	ldr	r0, [pc, #144]	@ (8003fe8 <vTaskStartScheduler+0xc4>)
 8003f56:	f7ff fdf1 	bl	8003b3c <xTaskCreateStatic>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4a23      	ldr	r2, [pc, #140]	@ (8003fec <vTaskStartScheduler+0xc8>)
 8003f5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f60:	4b22      	ldr	r3, [pc, #136]	@ (8003fec <vTaskStartScheduler+0xc8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	e001      	b.n	8003f72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d102      	bne.n	8003f7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f78:	f000 fd1a 	bl	80049b0 <xTimerCreateTimerTask>
 8003f7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d11b      	bne.n	8003fbc <vTaskStartScheduler+0x98>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	613b      	str	r3, [r7, #16]
}
 8003f96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f98:	4b15      	ldr	r3, [pc, #84]	@ (8003ff0 <vTaskStartScheduler+0xcc>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3354      	adds	r3, #84	@ 0x54
 8003f9e:	4a15      	ldr	r2, [pc, #84]	@ (8003ff4 <vTaskStartScheduler+0xd0>)
 8003fa0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fa2:	4b15      	ldr	r3, [pc, #84]	@ (8003ff8 <vTaskStartScheduler+0xd4>)
 8003fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003faa:	4b14      	ldr	r3, [pc, #80]	@ (8003ffc <vTaskStartScheduler+0xd8>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fb0:	4b13      	ldr	r3, [pc, #76]	@ (8004000 <vTaskStartScheduler+0xdc>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fb6:	f001 f8e3 	bl	8005180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fba:	e00f      	b.n	8003fdc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d10b      	bne.n	8003fdc <vTaskStartScheduler+0xb8>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	60fb      	str	r3, [r7, #12]
}
 8003fd6:	bf00      	nop
 8003fd8:	bf00      	nop
 8003fda:	e7fd      	b.n	8003fd8 <vTaskStartScheduler+0xb4>
}
 8003fdc:	bf00      	nop
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	08005b54 	.word	0x08005b54
 8003fe8:	08004635 	.word	0x08004635
 8003fec:	20000e14 	.word	0x20000e14
 8003ff0:	2000091c 	.word	0x2000091c
 8003ff4:	2000006c 	.word	0x2000006c
 8003ff8:	20000e10 	.word	0x20000e10
 8003ffc:	20000dfc 	.word	0x20000dfc
 8004000:	20000df4 	.word	0x20000df4

08004004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004008:	4b04      	ldr	r3, [pc, #16]	@ (800401c <vTaskSuspendAll+0x18>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3301      	adds	r3, #1
 800400e:	4a03      	ldr	r2, [pc, #12]	@ (800401c <vTaskSuspendAll+0x18>)
 8004010:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	20000e18 	.word	0x20000e18

08004020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800402e:	4b42      	ldr	r3, [pc, #264]	@ (8004138 <xTaskResumeAll+0x118>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10b      	bne.n	800404e <xTaskResumeAll+0x2e>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	603b      	str	r3, [r7, #0]
}
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	e7fd      	b.n	800404a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800404e:	f001 f93b 	bl	80052c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004052:	4b39      	ldr	r3, [pc, #228]	@ (8004138 <xTaskResumeAll+0x118>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3b01      	subs	r3, #1
 8004058:	4a37      	ldr	r2, [pc, #220]	@ (8004138 <xTaskResumeAll+0x118>)
 800405a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800405c:	4b36      	ldr	r3, [pc, #216]	@ (8004138 <xTaskResumeAll+0x118>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d162      	bne.n	800412a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004064:	4b35      	ldr	r3, [pc, #212]	@ (800413c <xTaskResumeAll+0x11c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d05e      	beq.n	800412a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800406c:	e02f      	b.n	80040ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800406e:	4b34      	ldr	r3, [pc, #208]	@ (8004140 <xTaskResumeAll+0x120>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3318      	adds	r3, #24
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff f83a 	bl	80030f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3304      	adds	r3, #4
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff f835 	bl	80030f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800408e:	4b2d      	ldr	r3, [pc, #180]	@ (8004144 <xTaskResumeAll+0x124>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d903      	bls.n	800409e <xTaskResumeAll+0x7e>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	4a2a      	ldr	r2, [pc, #168]	@ (8004144 <xTaskResumeAll+0x124>)
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4a27      	ldr	r2, [pc, #156]	@ (8004148 <xTaskResumeAll+0x128>)
 80040ac:	441a      	add	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f7fe ffc0 	bl	800303a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040be:	4b23      	ldr	r3, [pc, #140]	@ (800414c <xTaskResumeAll+0x12c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d302      	bcc.n	80040ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80040c8:	4b21      	ldr	r3, [pc, #132]	@ (8004150 <xTaskResumeAll+0x130>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004140 <xTaskResumeAll+0x120>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1cb      	bne.n	800406e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040dc:	f000 fb66 	bl	80047ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004154 <xTaskResumeAll+0x134>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d010      	beq.n	800410e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040ec:	f000 f846 	bl	800417c <xTaskIncrementTick>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80040f6:	4b16      	ldr	r3, [pc, #88]	@ (8004150 <xTaskResumeAll+0x130>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f1      	bne.n	80040ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004108:	4b12      	ldr	r3, [pc, #72]	@ (8004154 <xTaskResumeAll+0x134>)
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800410e:	4b10      	ldr	r3, [pc, #64]	@ (8004150 <xTaskResumeAll+0x130>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004116:	2301      	movs	r3, #1
 8004118:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800411a:	4b0f      	ldr	r3, [pc, #60]	@ (8004158 <xTaskResumeAll+0x138>)
 800411c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800412a:	f001 f8ff 	bl	800532c <vPortExitCritical>

	return xAlreadyYielded;
 800412e:	68bb      	ldr	r3, [r7, #8]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000e18 	.word	0x20000e18
 800413c:	20000df0 	.word	0x20000df0
 8004140:	20000db0 	.word	0x20000db0
 8004144:	20000df8 	.word	0x20000df8
 8004148:	20000920 	.word	0x20000920
 800414c:	2000091c 	.word	0x2000091c
 8004150:	20000e04 	.word	0x20000e04
 8004154:	20000e00 	.word	0x20000e00
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004162:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <xTaskGetTickCount+0x1c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004168:	687b      	ldr	r3, [r7, #4]
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000df4 	.word	0x20000df4

0800417c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004186:	4b4f      	ldr	r3, [pc, #316]	@ (80042c4 <xTaskIncrementTick+0x148>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f040 8090 	bne.w	80042b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004190:	4b4d      	ldr	r3, [pc, #308]	@ (80042c8 <xTaskIncrementTick+0x14c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004198:	4a4b      	ldr	r2, [pc, #300]	@ (80042c8 <xTaskIncrementTick+0x14c>)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d121      	bne.n	80041e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80041a4:	4b49      	ldr	r3, [pc, #292]	@ (80042cc <xTaskIncrementTick+0x150>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	603b      	str	r3, [r7, #0]
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	e7fd      	b.n	80041c2 <xTaskIncrementTick+0x46>
 80041c6:	4b41      	ldr	r3, [pc, #260]	@ (80042cc <xTaskIncrementTick+0x150>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	4b40      	ldr	r3, [pc, #256]	@ (80042d0 <xTaskIncrementTick+0x154>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a3e      	ldr	r2, [pc, #248]	@ (80042cc <xTaskIncrementTick+0x150>)
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	4a3e      	ldr	r2, [pc, #248]	@ (80042d0 <xTaskIncrementTick+0x154>)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	4b3e      	ldr	r3, [pc, #248]	@ (80042d4 <xTaskIncrementTick+0x158>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3301      	adds	r3, #1
 80041e0:	4a3c      	ldr	r2, [pc, #240]	@ (80042d4 <xTaskIncrementTick+0x158>)
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	f000 fae2 	bl	80047ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041e8:	4b3b      	ldr	r3, [pc, #236]	@ (80042d8 <xTaskIncrementTick+0x15c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d349      	bcc.n	8004286 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041f2:	4b36      	ldr	r3, [pc, #216]	@ (80042cc <xTaskIncrementTick+0x150>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d104      	bne.n	8004206 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041fc:	4b36      	ldr	r3, [pc, #216]	@ (80042d8 <xTaskIncrementTick+0x15c>)
 80041fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004202:	601a      	str	r2, [r3, #0]
					break;
 8004204:	e03f      	b.n	8004286 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004206:	4b31      	ldr	r3, [pc, #196]	@ (80042cc <xTaskIncrementTick+0x150>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	429a      	cmp	r2, r3
 800421c:	d203      	bcs.n	8004226 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800421e:	4a2e      	ldr	r2, [pc, #184]	@ (80042d8 <xTaskIncrementTick+0x15c>)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004224:	e02f      	b.n	8004286 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	3304      	adds	r3, #4
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe ff62 	bl	80030f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	3318      	adds	r3, #24
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe ff59 	bl	80030f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004246:	4b25      	ldr	r3, [pc, #148]	@ (80042dc <xTaskIncrementTick+0x160>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d903      	bls.n	8004256 <xTaskIncrementTick+0xda>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004252:	4a22      	ldr	r2, [pc, #136]	@ (80042dc <xTaskIncrementTick+0x160>)
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4a1f      	ldr	r2, [pc, #124]	@ (80042e0 <xTaskIncrementTick+0x164>)
 8004264:	441a      	add	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	3304      	adds	r3, #4
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f7fe fee4 	bl	800303a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004276:	4b1b      	ldr	r3, [pc, #108]	@ (80042e4 <xTaskIncrementTick+0x168>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	429a      	cmp	r2, r3
 800427e:	d3b8      	bcc.n	80041f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004284:	e7b5      	b.n	80041f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004286:	4b17      	ldr	r3, [pc, #92]	@ (80042e4 <xTaskIncrementTick+0x168>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428c:	4914      	ldr	r1, [pc, #80]	@ (80042e0 <xTaskIncrementTick+0x164>)
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d901      	bls.n	80042a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800429e:	2301      	movs	r3, #1
 80042a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042a2:	4b11      	ldr	r3, [pc, #68]	@ (80042e8 <xTaskIncrementTick+0x16c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80042aa:	2301      	movs	r3, #1
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	e004      	b.n	80042ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042b0:	4b0e      	ldr	r3, [pc, #56]	@ (80042ec <xTaskIncrementTick+0x170>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3301      	adds	r3, #1
 80042b6:	4a0d      	ldr	r2, [pc, #52]	@ (80042ec <xTaskIncrementTick+0x170>)
 80042b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042ba:	697b      	ldr	r3, [r7, #20]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000e18 	.word	0x20000e18
 80042c8:	20000df4 	.word	0x20000df4
 80042cc:	20000da8 	.word	0x20000da8
 80042d0:	20000dac 	.word	0x20000dac
 80042d4:	20000e08 	.word	0x20000e08
 80042d8:	20000e10 	.word	0x20000e10
 80042dc:	20000df8 	.word	0x20000df8
 80042e0:	20000920 	.word	0x20000920
 80042e4:	2000091c 	.word	0x2000091c
 80042e8:	20000e04 	.word	0x20000e04
 80042ec:	20000e00 	.word	0x20000e00

080042f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042f6:	4b2b      	ldr	r3, [pc, #172]	@ (80043a4 <vTaskSwitchContext+0xb4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042fe:	4b2a      	ldr	r3, [pc, #168]	@ (80043a8 <vTaskSwitchContext+0xb8>)
 8004300:	2201      	movs	r2, #1
 8004302:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004304:	e047      	b.n	8004396 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004306:	4b28      	ldr	r3, [pc, #160]	@ (80043a8 <vTaskSwitchContext+0xb8>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800430c:	4b27      	ldr	r3, [pc, #156]	@ (80043ac <vTaskSwitchContext+0xbc>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e011      	b.n	8004338 <vTaskSwitchContext+0x48>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <vTaskSwitchContext+0x42>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	607b      	str	r3, [r7, #4]
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	e7fd      	b.n	800432e <vTaskSwitchContext+0x3e>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3b01      	subs	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	491d      	ldr	r1, [pc, #116]	@ (80043b0 <vTaskSwitchContext+0xc0>)
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0e3      	beq.n	8004314 <vTaskSwitchContext+0x24>
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4a16      	ldr	r2, [pc, #88]	@ (80043b0 <vTaskSwitchContext+0xc0>)
 8004358:	4413      	add	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	3308      	adds	r3, #8
 800436e:	429a      	cmp	r2, r3
 8004370:	d104      	bne.n	800437c <vTaskSwitchContext+0x8c>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	4a0c      	ldr	r2, [pc, #48]	@ (80043b4 <vTaskSwitchContext+0xc4>)
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4a09      	ldr	r2, [pc, #36]	@ (80043ac <vTaskSwitchContext+0xbc>)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800438c:	4b09      	ldr	r3, [pc, #36]	@ (80043b4 <vTaskSwitchContext+0xc4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3354      	adds	r3, #84	@ 0x54
 8004392:	4a09      	ldr	r2, [pc, #36]	@ (80043b8 <vTaskSwitchContext+0xc8>)
 8004394:	6013      	str	r3, [r2, #0]
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20000e18 	.word	0x20000e18
 80043a8:	20000e04 	.word	0x20000e04
 80043ac:	20000df8 	.word	0x20000df8
 80043b0:	20000920 	.word	0x20000920
 80043b4:	2000091c 	.word	0x2000091c
 80043b8:	2000006c 	.word	0x2000006c

080043bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10b      	bne.n	80043e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	60fb      	str	r3, [r7, #12]
}
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
 80043e2:	e7fd      	b.n	80043e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043e4:	4b07      	ldr	r3, [pc, #28]	@ (8004404 <vTaskPlaceOnEventList+0x48>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3318      	adds	r3, #24
 80043ea:	4619      	mov	r1, r3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7fe fe48 	bl	8003082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043f2:	2101      	movs	r1, #1
 80043f4:	6838      	ldr	r0, [r7, #0]
 80043f6:	f000 fa87 	bl	8004908 <prvAddCurrentTaskToDelayedList>
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	2000091c 	.word	0x2000091c

08004408 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	617b      	str	r3, [r7, #20]
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	e7fd      	b.n	800442e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004432:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <vTaskPlaceOnEventListRestricted+0x54>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3318      	adds	r3, #24
 8004438:	4619      	mov	r1, r3
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f7fe fdfd 	bl	800303a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004446:	f04f 33ff 	mov.w	r3, #4294967295
 800444a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	68b8      	ldr	r0, [r7, #8]
 8004450:	f000 fa5a 	bl	8004908 <prvAddCurrentTaskToDelayedList>
	}
 8004454:	bf00      	nop
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	2000091c 	.word	0x2000091c

08004460 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60fb      	str	r3, [r7, #12]
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	e7fd      	b.n	800448a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	3318      	adds	r3, #24
 8004492:	4618      	mov	r0, r3
 8004494:	f7fe fe2e 	bl	80030f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004498:	4b1d      	ldr	r3, [pc, #116]	@ (8004510 <xTaskRemoveFromEventList+0xb0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11d      	bne.n	80044dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe fe25 	bl	80030f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ae:	4b19      	ldr	r3, [pc, #100]	@ (8004514 <xTaskRemoveFromEventList+0xb4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d903      	bls.n	80044be <xTaskRemoveFromEventList+0x5e>
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	4a16      	ldr	r2, [pc, #88]	@ (8004514 <xTaskRemoveFromEventList+0xb4>)
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4a13      	ldr	r2, [pc, #76]	@ (8004518 <xTaskRemoveFromEventList+0xb8>)
 80044cc:	441a      	add	r2, r3
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4619      	mov	r1, r3
 80044d4:	4610      	mov	r0, r2
 80044d6:	f7fe fdb0 	bl	800303a <vListInsertEnd>
 80044da:	e005      	b.n	80044e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	3318      	adds	r3, #24
 80044e0:	4619      	mov	r1, r3
 80044e2:	480e      	ldr	r0, [pc, #56]	@ (800451c <xTaskRemoveFromEventList+0xbc>)
 80044e4:	f7fe fda9 	bl	800303a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004520 <xTaskRemoveFromEventList+0xc0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d905      	bls.n	8004502 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044f6:	2301      	movs	r3, #1
 80044f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004524 <xTaskRemoveFromEventList+0xc4>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e001      	b.n	8004506 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004506:	697b      	ldr	r3, [r7, #20]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20000e18 	.word	0x20000e18
 8004514:	20000df8 	.word	0x20000df8
 8004518:	20000920 	.word	0x20000920
 800451c:	20000db0 	.word	0x20000db0
 8004520:	2000091c 	.word	0x2000091c
 8004524:	20000e04 	.word	0x20000e04

08004528 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004530:	4b06      	ldr	r3, [pc, #24]	@ (800454c <vTaskInternalSetTimeOutState+0x24>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004538:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <vTaskInternalSetTimeOutState+0x28>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	605a      	str	r2, [r3, #4]
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	20000e08 	.word	0x20000e08
 8004550:	20000df4 	.word	0x20000df4

08004554 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	613b      	str	r3, [r7, #16]
}
 8004576:	bf00      	nop
 8004578:	bf00      	nop
 800457a:	e7fd      	b.n	8004578 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	60fb      	str	r3, [r7, #12]
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	e7fd      	b.n	8004596 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800459a:	f000 fe95 	bl	80052c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800459e:	4b1d      	ldr	r3, [pc, #116]	@ (8004614 <xTaskCheckForTimeOut+0xc0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	d102      	bne.n	80045be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	e023      	b.n	8004606 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b15      	ldr	r3, [pc, #84]	@ (8004618 <xTaskCheckForTimeOut+0xc4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d007      	beq.n	80045da <xTaskCheckForTimeOut+0x86>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d302      	bcc.n	80045da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045d4:	2301      	movs	r3, #1
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	e015      	b.n	8004606 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d20b      	bcs.n	80045fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	1ad2      	subs	r2, r2, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ff99 	bl	8004528 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e004      	b.n	8004606 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004602:	2301      	movs	r3, #1
 8004604:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004606:	f000 fe91 	bl	800532c <vPortExitCritical>

	return xReturn;
 800460a:	69fb      	ldr	r3, [r7, #28]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000df4 	.word	0x20000df4
 8004618:	20000e08 	.word	0x20000e08

0800461c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004620:	4b03      	ldr	r3, [pc, #12]	@ (8004630 <vTaskMissedYield+0x14>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	20000e04 	.word	0x20000e04

08004634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800463c:	f000 f852 	bl	80046e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004640:	4b06      	ldr	r3, [pc, #24]	@ (800465c <prvIdleTask+0x28>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d9f9      	bls.n	800463c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004648:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <prvIdleTask+0x2c>)
 800464a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004658:	e7f0      	b.n	800463c <prvIdleTask+0x8>
 800465a:	bf00      	nop
 800465c:	20000920 	.word	0x20000920
 8004660:	e000ed04 	.word	0xe000ed04

08004664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800466a:	2300      	movs	r3, #0
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	e00c      	b.n	800468a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4a12      	ldr	r2, [pc, #72]	@ (80046c4 <prvInitialiseTaskLists+0x60>)
 800467c:	4413      	add	r3, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe fcae 	bl	8002fe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3301      	adds	r3, #1
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b37      	cmp	r3, #55	@ 0x37
 800468e:	d9ef      	bls.n	8004670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004690:	480d      	ldr	r0, [pc, #52]	@ (80046c8 <prvInitialiseTaskLists+0x64>)
 8004692:	f7fe fca5 	bl	8002fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004696:	480d      	ldr	r0, [pc, #52]	@ (80046cc <prvInitialiseTaskLists+0x68>)
 8004698:	f7fe fca2 	bl	8002fe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800469c:	480c      	ldr	r0, [pc, #48]	@ (80046d0 <prvInitialiseTaskLists+0x6c>)
 800469e:	f7fe fc9f 	bl	8002fe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046a2:	480c      	ldr	r0, [pc, #48]	@ (80046d4 <prvInitialiseTaskLists+0x70>)
 80046a4:	f7fe fc9c 	bl	8002fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046a8:	480b      	ldr	r0, [pc, #44]	@ (80046d8 <prvInitialiseTaskLists+0x74>)
 80046aa:	f7fe fc99 	bl	8002fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046ae:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <prvInitialiseTaskLists+0x78>)
 80046b0:	4a05      	ldr	r2, [pc, #20]	@ (80046c8 <prvInitialiseTaskLists+0x64>)
 80046b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046b4:	4b0a      	ldr	r3, [pc, #40]	@ (80046e0 <prvInitialiseTaskLists+0x7c>)
 80046b6:	4a05      	ldr	r2, [pc, #20]	@ (80046cc <prvInitialiseTaskLists+0x68>)
 80046b8:	601a      	str	r2, [r3, #0]
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000920 	.word	0x20000920
 80046c8:	20000d80 	.word	0x20000d80
 80046cc:	20000d94 	.word	0x20000d94
 80046d0:	20000db0 	.word	0x20000db0
 80046d4:	20000dc4 	.word	0x20000dc4
 80046d8:	20000ddc 	.word	0x20000ddc
 80046dc:	20000da8 	.word	0x20000da8
 80046e0:	20000dac 	.word	0x20000dac

080046e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046ea:	e019      	b.n	8004720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046ec:	f000 fdec 	bl	80052c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046f0:	4b10      	ldr	r3, [pc, #64]	@ (8004734 <prvCheckTasksWaitingTermination+0x50>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fe fcf9 	bl	80030f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004702:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <prvCheckTasksWaitingTermination+0x54>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3b01      	subs	r3, #1
 8004708:	4a0b      	ldr	r2, [pc, #44]	@ (8004738 <prvCheckTasksWaitingTermination+0x54>)
 800470a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800470c:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <prvCheckTasksWaitingTermination+0x58>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3b01      	subs	r3, #1
 8004712:	4a0a      	ldr	r2, [pc, #40]	@ (800473c <prvCheckTasksWaitingTermination+0x58>)
 8004714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004716:	f000 fe09 	bl	800532c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f810 	bl	8004740 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004720:	4b06      	ldr	r3, [pc, #24]	@ (800473c <prvCheckTasksWaitingTermination+0x58>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e1      	bne.n	80046ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000dc4 	.word	0x20000dc4
 8004738:	20000df0 	.word	0x20000df0
 800473c:	20000dd8 	.word	0x20000dd8

08004740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3354      	adds	r3, #84	@ 0x54
 800474c:	4618      	mov	r0, r3
 800474e:	f001 f8d3 	bl	80058f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004758:	2b00      	cmp	r3, #0
 800475a:	d108      	bne.n	800476e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004760:	4618      	mov	r0, r3
 8004762:	f000 ffa1 	bl	80056a8 <vPortFree>
				vPortFree( pxTCB );
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 ff9e 	bl	80056a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800476c:	e019      	b.n	80047a2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004774:	2b01      	cmp	r3, #1
 8004776:	d103      	bne.n	8004780 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 ff95 	bl	80056a8 <vPortFree>
	}
 800477e:	e010      	b.n	80047a2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004786:	2b02      	cmp	r3, #2
 8004788:	d00b      	beq.n	80047a2 <prvDeleteTCB+0x62>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	60fb      	str	r3, [r7, #12]
}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	e7fd      	b.n	800479e <prvDeleteTCB+0x5e>
	}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b2:	4b0c      	ldr	r3, [pc, #48]	@ (80047e4 <prvResetNextTaskUnblockTime+0x38>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d104      	bne.n	80047c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <prvResetNextTaskUnblockTime+0x3c>)
 80047be:	f04f 32ff 	mov.w	r2, #4294967295
 80047c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047c4:	e008      	b.n	80047d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c6:	4b07      	ldr	r3, [pc, #28]	@ (80047e4 <prvResetNextTaskUnblockTime+0x38>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	4a04      	ldr	r2, [pc, #16]	@ (80047e8 <prvResetNextTaskUnblockTime+0x3c>)
 80047d6:	6013      	str	r3, [r2, #0]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	20000da8 	.word	0x20000da8
 80047e8:	20000e10 	.word	0x20000e10

080047ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <xTaskGetSchedulerState+0x34>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047fa:	2301      	movs	r3, #1
 80047fc:	607b      	str	r3, [r7, #4]
 80047fe:	e008      	b.n	8004812 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004800:	4b08      	ldr	r3, [pc, #32]	@ (8004824 <xTaskGetSchedulerState+0x38>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d102      	bne.n	800480e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004808:	2302      	movs	r3, #2
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	e001      	b.n	8004812 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004812:	687b      	ldr	r3, [r7, #4]
	}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	20000dfc 	.word	0x20000dfc
 8004824:	20000e18 	.word	0x20000e18

08004828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d058      	beq.n	80048f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800483e:	4b2f      	ldr	r3, [pc, #188]	@ (80048fc <xTaskPriorityDisinherit+0xd4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	429a      	cmp	r2, r3
 8004846:	d00b      	beq.n	8004860 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	60fb      	str	r3, [r7, #12]
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	60bb      	str	r3, [r7, #8]
}
 800487a:	bf00      	nop
 800487c:	bf00      	nop
 800487e:	e7fd      	b.n	800487c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004884:	1e5a      	subs	r2, r3, #1
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004892:	429a      	cmp	r2, r3
 8004894:	d02c      	beq.n	80048f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489a:	2b00      	cmp	r3, #0
 800489c:	d128      	bne.n	80048f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	3304      	adds	r3, #4
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fe fc26 	bl	80030f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004900 <xTaskPriorityDisinherit+0xd8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d903      	bls.n	80048d0 <xTaskPriorityDisinherit+0xa8>
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004900 <xTaskPriorityDisinherit+0xd8>)
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4a09      	ldr	r2, [pc, #36]	@ (8004904 <xTaskPriorityDisinherit+0xdc>)
 80048de:	441a      	add	r2, r3
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f7fe fba7 	bl	800303a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048ec:	2301      	movs	r3, #1
 80048ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048f0:	697b      	ldr	r3, [r7, #20]
	}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	2000091c 	.word	0x2000091c
 8004900:	20000df8 	.word	0x20000df8
 8004904:	20000920 	.word	0x20000920

08004908 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004912:	4b21      	ldr	r3, [pc, #132]	@ (8004998 <prvAddCurrentTaskToDelayedList+0x90>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004918:	4b20      	ldr	r3, [pc, #128]	@ (800499c <prvAddCurrentTaskToDelayedList+0x94>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3304      	adds	r3, #4
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe fbe8 	bl	80030f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492a:	d10a      	bne.n	8004942 <prvAddCurrentTaskToDelayedList+0x3a>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004932:	4b1a      	ldr	r3, [pc, #104]	@ (800499c <prvAddCurrentTaskToDelayedList+0x94>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4819      	ldr	r0, [pc, #100]	@ (80049a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800493c:	f7fe fb7d 	bl	800303a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004940:	e026      	b.n	8004990 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4413      	add	r3, r2
 8004948:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800494a:	4b14      	ldr	r3, [pc, #80]	@ (800499c <prvAddCurrentTaskToDelayedList+0x94>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	429a      	cmp	r2, r3
 8004958:	d209      	bcs.n	800496e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800495a:	4b12      	ldr	r3, [pc, #72]	@ (80049a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b0f      	ldr	r3, [pc, #60]	@ (800499c <prvAddCurrentTaskToDelayedList+0x94>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3304      	adds	r3, #4
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f7fe fb8b 	bl	8003082 <vListInsert>
}
 800496c:	e010      	b.n	8004990 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800496e:	4b0e      	ldr	r3, [pc, #56]	@ (80049a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b0a      	ldr	r3, [pc, #40]	@ (800499c <prvAddCurrentTaskToDelayedList+0x94>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3304      	adds	r3, #4
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f7fe fb81 	bl	8003082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004980:	4b0a      	ldr	r3, [pc, #40]	@ (80049ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	429a      	cmp	r2, r3
 8004988:	d202      	bcs.n	8004990 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800498a:	4a08      	ldr	r2, [pc, #32]	@ (80049ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	6013      	str	r3, [r2, #0]
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000df4 	.word	0x20000df4
 800499c:	2000091c 	.word	0x2000091c
 80049a0:	20000ddc 	.word	0x20000ddc
 80049a4:	20000dac 	.word	0x20000dac
 80049a8:	20000da8 	.word	0x20000da8
 80049ac:	20000e10 	.word	0x20000e10

080049b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	@ 0x28
 80049b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049ba:	f000 fb13 	bl	8004fe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049be:	4b1d      	ldr	r3, [pc, #116]	@ (8004a34 <xTimerCreateTimerTask+0x84>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d021      	beq.n	8004a0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80049ce:	1d3a      	adds	r2, r7, #4
 80049d0:	f107 0108 	add.w	r1, r7, #8
 80049d4:	f107 030c 	add.w	r3, r7, #12
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe fae7 	bl	8002fac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	9202      	str	r2, [sp, #8]
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	2302      	movs	r3, #2
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	2300      	movs	r3, #0
 80049ee:	460a      	mov	r2, r1
 80049f0:	4911      	ldr	r1, [pc, #68]	@ (8004a38 <xTimerCreateTimerTask+0x88>)
 80049f2:	4812      	ldr	r0, [pc, #72]	@ (8004a3c <xTimerCreateTimerTask+0x8c>)
 80049f4:	f7ff f8a2 	bl	8003b3c <xTaskCreateStatic>
 80049f8:	4603      	mov	r3, r0
 80049fa:	4a11      	ldr	r2, [pc, #68]	@ (8004a40 <xTimerCreateTimerTask+0x90>)
 80049fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80049fe:	4b10      	ldr	r3, [pc, #64]	@ (8004a40 <xTimerCreateTimerTask+0x90>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a06:	2301      	movs	r3, #1
 8004a08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10b      	bne.n	8004a28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	613b      	str	r3, [r7, #16]
}
 8004a22:	bf00      	nop
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a28:	697b      	ldr	r3, [r7, #20]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000e4c 	.word	0x20000e4c
 8004a38:	08005b5c 	.word	0x08005b5c
 8004a3c:	08004b7d 	.word	0x08004b7d
 8004a40:	20000e50 	.word	0x20000e50

08004a44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	@ 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10b      	bne.n	8004a74 <xTimerGenericCommand+0x30>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	623b      	str	r3, [r7, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	e7fd      	b.n	8004a70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a74:	4b19      	ldr	r3, [pc, #100]	@ (8004adc <xTimerGenericCommand+0x98>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d02a      	beq.n	8004ad2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b05      	cmp	r3, #5
 8004a8c:	dc18      	bgt.n	8004ac0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a8e:	f7ff fead 	bl	80047ec <xTaskGetSchedulerState>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d109      	bne.n	8004aac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a98:	4b10      	ldr	r3, [pc, #64]	@ (8004adc <xTimerGenericCommand+0x98>)
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	f107 0110 	add.w	r1, r7, #16
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aa4:	f7fe fc5a 	bl	800335c <xQueueGenericSend>
 8004aa8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004aaa:	e012      	b.n	8004ad2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004aac:	4b0b      	ldr	r3, [pc, #44]	@ (8004adc <xTimerGenericCommand+0x98>)
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	f107 0110 	add.w	r1, r7, #16
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f7fe fc50 	bl	800335c <xQueueGenericSend>
 8004abc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004abe:	e008      	b.n	8004ad2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ac0:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <xTimerGenericCommand+0x98>)
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	f107 0110 	add.w	r1, r7, #16
 8004ac8:	2300      	movs	r3, #0
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	f7fe fd48 	bl	8003560 <xQueueGenericSendFromISR>
 8004ad0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3728      	adds	r7, #40	@ 0x28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20000e4c 	.word	0x20000e4c

08004ae0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aea:	4b23      	ldr	r3, [pc, #140]	@ (8004b78 <prvProcessExpiredTimer+0x98>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe fafb 	bl	80030f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d023      	beq.n	8004b54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	699a      	ldr	r2, [r3, #24]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	18d1      	adds	r1, r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f000 f8d5 	bl	8004cc8 <prvInsertTimerInActiveList>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d020      	beq.n	8004b66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b24:	2300      	movs	r3, #0
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	6978      	ldr	r0, [r7, #20]
 8004b30:	f7ff ff88 	bl	8004a44 <xTimerGenericCommand>
 8004b34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d114      	bne.n	8004b66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	60fb      	str	r3, [r7, #12]
}
 8004b4e:	bf00      	nop
 8004b50:	bf00      	nop
 8004b52:	e7fd      	b.n	8004b50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b5a:	f023 0301 	bic.w	r3, r3, #1
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	6978      	ldr	r0, [r7, #20]
 8004b6c:	4798      	blx	r3
}
 8004b6e:	bf00      	nop
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000e44 	.word	0x20000e44

08004b7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b84:	f107 0308 	add.w	r3, r7, #8
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 f859 	bl	8004c40 <prvGetNextExpireTime>
 8004b8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4619      	mov	r1, r3
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f805 	bl	8004ba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b9a:	f000 f8d7 	bl	8004d4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b9e:	bf00      	nop
 8004ba0:	e7f0      	b.n	8004b84 <prvTimerTask+0x8>
	...

08004ba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bae:	f7ff fa29 	bl	8004004 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bb2:	f107 0308 	add.w	r3, r7, #8
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 f866 	bl	8004c88 <prvSampleTimeNow>
 8004bbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d130      	bne.n	8004c26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <prvProcessTimerOrBlockTask+0x3c>
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d806      	bhi.n	8004be0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bd2:	f7ff fa25 	bl	8004020 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bd6:	68f9      	ldr	r1, [r7, #12]
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ff81 	bl	8004ae0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004bde:	e024      	b.n	8004c2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004be6:	4b13      	ldr	r3, [pc, #76]	@ (8004c34 <prvProcessTimerOrBlockTask+0x90>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <prvProcessTimerOrBlockTask+0x50>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <prvProcessTimerOrBlockTask+0x52>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c38 <prvProcessTimerOrBlockTask+0x94>)
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	4619      	mov	r1, r3
 8004c06:	f7fe ff65 	bl	8003ad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c0a:	f7ff fa09 	bl	8004020 <xTaskResumeAll>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c14:	4b09      	ldr	r3, [pc, #36]	@ (8004c3c <prvProcessTimerOrBlockTask+0x98>)
 8004c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	f3bf 8f6f 	isb	sy
}
 8004c24:	e001      	b.n	8004c2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c26:	f7ff f9fb 	bl	8004020 <xTaskResumeAll>
}
 8004c2a:	bf00      	nop
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000e48 	.word	0x20000e48
 8004c38:	20000e4c 	.word	0x20000e4c
 8004c3c:	e000ed04 	.word	0xe000ed04

08004c40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c48:	4b0e      	ldr	r3, [pc, #56]	@ (8004c84 <prvGetNextExpireTime+0x44>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <prvGetNextExpireTime+0x16>
 8004c52:	2201      	movs	r2, #1
 8004c54:	e000      	b.n	8004c58 <prvGetNextExpireTime+0x18>
 8004c56:	2200      	movs	r2, #0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d105      	bne.n	8004c70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c64:	4b07      	ldr	r3, [pc, #28]	@ (8004c84 <prvGetNextExpireTime+0x44>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e001      	b.n	8004c74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c74:	68fb      	ldr	r3, [r7, #12]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000e44 	.word	0x20000e44

08004c88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c90:	f7ff fa64 	bl	800415c <xTaskGetTickCount>
 8004c94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c96:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <prvSampleTimeNow+0x3c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d205      	bcs.n	8004cac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ca0:	f000 f93a 	bl	8004f18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e002      	b.n	8004cb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cb2:	4a04      	ldr	r2, [pc, #16]	@ (8004cc4 <prvSampleTimeNow+0x3c>)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000e54 	.word	0x20000e54

08004cc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d812      	bhi.n	8004d14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	1ad2      	subs	r2, r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d302      	bcc.n	8004d02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	e01b      	b.n	8004d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d02:	4b10      	ldr	r3, [pc, #64]	@ (8004d44 <prvInsertTimerInActiveList+0x7c>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f7fe f9b8 	bl	8003082 <vListInsert>
 8004d12:	e012      	b.n	8004d3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d206      	bcs.n	8004d2a <prvInsertTimerInActiveList+0x62>
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d302      	bcc.n	8004d2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e007      	b.n	8004d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d2a:	4b07      	ldr	r3, [pc, #28]	@ (8004d48 <prvInsertTimerInActiveList+0x80>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f7fe f9a4 	bl	8003082 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d3a:	697b      	ldr	r3, [r7, #20]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20000e48 	.word	0x20000e48
 8004d48:	20000e44 	.word	0x20000e44

08004d4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08e      	sub	sp, #56	@ 0x38
 8004d50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d52:	e0ce      	b.n	8004ef2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	da19      	bge.n	8004d8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d5a:	1d3b      	adds	r3, r7, #4
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10b      	bne.n	8004d7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	61fb      	str	r3, [r7, #28]
}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	e7fd      	b.n	8004d7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d84:	6850      	ldr	r0, [r2, #4]
 8004d86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d88:	6892      	ldr	r2, [r2, #8]
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f2c0 80ae 	blt.w	8004ef2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d004      	beq.n	8004dac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da4:	3304      	adds	r3, #4
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe f9a4 	bl	80030f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dac:	463b      	mov	r3, r7
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff ff6a 	bl	8004c88 <prvSampleTimeNow>
 8004db4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b09      	cmp	r3, #9
 8004dba:	f200 8097 	bhi.w	8004eec <prvProcessReceivedCommands+0x1a0>
 8004dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <prvProcessReceivedCommands+0x78>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004ded 	.word	0x08004ded
 8004dc8:	08004ded 	.word	0x08004ded
 8004dcc:	08004ded 	.word	0x08004ded
 8004dd0:	08004e63 	.word	0x08004e63
 8004dd4:	08004e77 	.word	0x08004e77
 8004dd8:	08004ec3 	.word	0x08004ec3
 8004ddc:	08004ded 	.word	0x08004ded
 8004de0:	08004ded 	.word	0x08004ded
 8004de4:	08004e63 	.word	0x08004e63
 8004de8:	08004e77 	.word	0x08004e77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	18d1      	adds	r1, r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e0c:	f7ff ff5c 	bl	8004cc8 <prvInsertTimerInActiveList>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d06c      	beq.n	8004ef0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d061      	beq.n	8004ef0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	441a      	add	r2, r3
 8004e34:	2300      	movs	r3, #0
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e3e:	f7ff fe01 	bl	8004a44 <xTimerGenericCommand>
 8004e42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d152      	bne.n	8004ef0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	61bb      	str	r3, [r7, #24]
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004e74:	e03d      	b.n	8004ef2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10b      	bne.n	8004eae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	617b      	str	r3, [r7, #20]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	18d1      	adds	r1, r2, r3
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ebc:	f7ff ff04 	bl	8004cc8 <prvInsertTimerInActiveList>
					break;
 8004ec0:	e017      	b.n	8004ef2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d103      	bne.n	8004ed8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004ed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ed2:	f000 fbe9 	bl	80056a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ed6:	e00c      	b.n	8004ef2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004eea:	e002      	b.n	8004ef2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004eec:	bf00      	nop
 8004eee:	e000      	b.n	8004ef2 <prvProcessReceivedCommands+0x1a6>
					break;
 8004ef0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ef2:	4b08      	ldr	r3, [pc, #32]	@ (8004f14 <prvProcessReceivedCommands+0x1c8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	1d39      	adds	r1, r7, #4
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe fbce 	bl	800369c <xQueueReceive>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f47f af26 	bne.w	8004d54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	3730      	adds	r7, #48	@ 0x30
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000e4c 	.word	0x20000e4c

08004f18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f1e:	e049      	b.n	8004fb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f20:	4b2e      	ldr	r3, [pc, #184]	@ (8004fdc <prvSwitchTimerLists+0xc4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004fdc <prvSwitchTimerLists+0xc4>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe f8db 	bl	80030f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d02f      	beq.n	8004fb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d90e      	bls.n	8004f84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f72:	4b1a      	ldr	r3, [pc, #104]	@ (8004fdc <prvSwitchTimerLists+0xc4>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f7fe f880 	bl	8003082 <vListInsert>
 8004f82:	e017      	b.n	8004fb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f84:	2300      	movs	r3, #0
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff fd58 	bl	8004a44 <xTimerGenericCommand>
 8004f94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	603b      	str	r3, [r7, #0]
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fb4:	4b09      	ldr	r3, [pc, #36]	@ (8004fdc <prvSwitchTimerLists+0xc4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1b0      	bne.n	8004f20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fbe:	4b07      	ldr	r3, [pc, #28]	@ (8004fdc <prvSwitchTimerLists+0xc4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fc4:	4b06      	ldr	r3, [pc, #24]	@ (8004fe0 <prvSwitchTimerLists+0xc8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a04      	ldr	r2, [pc, #16]	@ (8004fdc <prvSwitchTimerLists+0xc4>)
 8004fca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fcc:	4a04      	ldr	r2, [pc, #16]	@ (8004fe0 <prvSwitchTimerLists+0xc8>)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	6013      	str	r3, [r2, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000e44 	.word	0x20000e44
 8004fe0:	20000e48 	.word	0x20000e48

08004fe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fea:	f000 f96d 	bl	80052c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fee:	4b15      	ldr	r3, [pc, #84]	@ (8005044 <prvCheckForValidListAndQueue+0x60>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d120      	bne.n	8005038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ff6:	4814      	ldr	r0, [pc, #80]	@ (8005048 <prvCheckForValidListAndQueue+0x64>)
 8004ff8:	f7fd fff2 	bl	8002fe0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ffc:	4813      	ldr	r0, [pc, #76]	@ (800504c <prvCheckForValidListAndQueue+0x68>)
 8004ffe:	f7fd ffef 	bl	8002fe0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005002:	4b13      	ldr	r3, [pc, #76]	@ (8005050 <prvCheckForValidListAndQueue+0x6c>)
 8005004:	4a10      	ldr	r2, [pc, #64]	@ (8005048 <prvCheckForValidListAndQueue+0x64>)
 8005006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005008:	4b12      	ldr	r3, [pc, #72]	@ (8005054 <prvCheckForValidListAndQueue+0x70>)
 800500a:	4a10      	ldr	r2, [pc, #64]	@ (800504c <prvCheckForValidListAndQueue+0x68>)
 800500c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800500e:	2300      	movs	r3, #0
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	4b11      	ldr	r3, [pc, #68]	@ (8005058 <prvCheckForValidListAndQueue+0x74>)
 8005014:	4a11      	ldr	r2, [pc, #68]	@ (800505c <prvCheckForValidListAndQueue+0x78>)
 8005016:	2110      	movs	r1, #16
 8005018:	200a      	movs	r0, #10
 800501a:	f7fe f8ff 	bl	800321c <xQueueGenericCreateStatic>
 800501e:	4603      	mov	r3, r0
 8005020:	4a08      	ldr	r2, [pc, #32]	@ (8005044 <prvCheckForValidListAndQueue+0x60>)
 8005022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005024:	4b07      	ldr	r3, [pc, #28]	@ (8005044 <prvCheckForValidListAndQueue+0x60>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800502c:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <prvCheckForValidListAndQueue+0x60>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	490b      	ldr	r1, [pc, #44]	@ (8005060 <prvCheckForValidListAndQueue+0x7c>)
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe fd24 	bl	8003a80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005038:	f000 f978 	bl	800532c <vPortExitCritical>
}
 800503c:	bf00      	nop
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000e4c 	.word	0x20000e4c
 8005048:	20000e1c 	.word	0x20000e1c
 800504c:	20000e30 	.word	0x20000e30
 8005050:	20000e44 	.word	0x20000e44
 8005054:	20000e48 	.word	0x20000e48
 8005058:	20000ef8 	.word	0x20000ef8
 800505c:	20000e58 	.word	0x20000e58
 8005060:	08005b64 	.word	0x08005b64

08005064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3b04      	subs	r3, #4
 8005074:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800507c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3b04      	subs	r3, #4
 8005082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f023 0201 	bic.w	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3b04      	subs	r3, #4
 8005092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005094:	4a0c      	ldr	r2, [pc, #48]	@ (80050c8 <pxPortInitialiseStack+0x64>)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3b14      	subs	r3, #20
 800509e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3b04      	subs	r3, #4
 80050aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f06f 0202 	mvn.w	r2, #2
 80050b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3b20      	subs	r3, #32
 80050b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050ba:	68fb      	ldr	r3, [r7, #12]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	080050cd 	.word	0x080050cd

080050cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050d6:	4b13      	ldr	r3, [pc, #76]	@ (8005124 <prvTaskExitError+0x58>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d00b      	beq.n	80050f8 <prvTaskExitError+0x2c>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	60fb      	str	r3, [r7, #12]
}
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <prvTaskExitError+0x28>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	60bb      	str	r3, [r7, #8]
}
 800510a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800510c:	bf00      	nop
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0fc      	beq.n	800510e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000068 	.word	0x20000068
	...

08005130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005130:	4b07      	ldr	r3, [pc, #28]	@ (8005150 <pxCurrentTCBConst2>)
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	6808      	ldr	r0, [r1, #0]
 8005136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513a:	f380 8809 	msr	PSP, r0
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8811 	msr	BASEPRI, r0
 800514a:	4770      	bx	lr
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst2>:
 8005150:	2000091c 	.word	0x2000091c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005158:	4808      	ldr	r0, [pc, #32]	@ (800517c <prvPortStartFirstTask+0x24>)
 800515a:	6800      	ldr	r0, [r0, #0]
 800515c:	6800      	ldr	r0, [r0, #0]
 800515e:	f380 8808 	msr	MSP, r0
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f380 8814 	msr	CONTROL, r0
 800516a:	b662      	cpsie	i
 800516c:	b661      	cpsie	f
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	df00      	svc	0
 8005178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800517a:	bf00      	nop
 800517c:	e000ed08 	.word	0xe000ed08

08005180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005186:	4b47      	ldr	r3, [pc, #284]	@ (80052a4 <xPortStartScheduler+0x124>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a47      	ldr	r2, [pc, #284]	@ (80052a8 <xPortStartScheduler+0x128>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d10b      	bne.n	80051a8 <xPortStartScheduler+0x28>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	613b      	str	r3, [r7, #16]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051a8:	4b3e      	ldr	r3, [pc, #248]	@ (80052a4 <xPortStartScheduler+0x124>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a3f      	ldr	r2, [pc, #252]	@ (80052ac <xPortStartScheduler+0x12c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d10b      	bne.n	80051ca <xPortStartScheduler+0x4a>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60fb      	str	r3, [r7, #12]
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	e7fd      	b.n	80051c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051ca:	4b39      	ldr	r3, [pc, #228]	@ (80052b0 <xPortStartScheduler+0x130>)
 80051cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	22ff      	movs	r2, #255	@ 0xff
 80051da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	4b31      	ldr	r3, [pc, #196]	@ (80052b4 <xPortStartScheduler+0x134>)
 80051f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051f2:	4b31      	ldr	r3, [pc, #196]	@ (80052b8 <xPortStartScheduler+0x138>)
 80051f4:	2207      	movs	r2, #7
 80051f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051f8:	e009      	b.n	800520e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80051fa:	4b2f      	ldr	r3, [pc, #188]	@ (80052b8 <xPortStartScheduler+0x138>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3b01      	subs	r3, #1
 8005200:	4a2d      	ldr	r2, [pc, #180]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005202:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005216:	2b80      	cmp	r3, #128	@ 0x80
 8005218:	d0ef      	beq.n	80051fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800521a:	4b27      	ldr	r3, [pc, #156]	@ (80052b8 <xPortStartScheduler+0x138>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f1c3 0307 	rsb	r3, r3, #7
 8005222:	2b04      	cmp	r3, #4
 8005224:	d00b      	beq.n	800523e <xPortStartScheduler+0xbe>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	60bb      	str	r3, [r7, #8]
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	e7fd      	b.n	800523a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800523e:	4b1e      	ldr	r3, [pc, #120]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	4a1c      	ldr	r2, [pc, #112]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005248:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <xPortStartScheduler+0x138>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005250:	4a19      	ldr	r2, [pc, #100]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800525c:	4b17      	ldr	r3, [pc, #92]	@ (80052bc <xPortStartScheduler+0x13c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a16      	ldr	r2, [pc, #88]	@ (80052bc <xPortStartScheduler+0x13c>)
 8005262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005268:	4b14      	ldr	r3, [pc, #80]	@ (80052bc <xPortStartScheduler+0x13c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a13      	ldr	r2, [pc, #76]	@ (80052bc <xPortStartScheduler+0x13c>)
 800526e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005274:	f000 f8da 	bl	800542c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005278:	4b11      	ldr	r3, [pc, #68]	@ (80052c0 <xPortStartScheduler+0x140>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800527e:	f000 f8f9 	bl	8005474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005282:	4b10      	ldr	r3, [pc, #64]	@ (80052c4 <xPortStartScheduler+0x144>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a0f      	ldr	r2, [pc, #60]	@ (80052c4 <xPortStartScheduler+0x144>)
 8005288:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800528c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800528e:	f7ff ff63 	bl	8005158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005292:	f7ff f82d 	bl	80042f0 <vTaskSwitchContext>
	prvTaskExitError();
 8005296:	f7ff ff19 	bl	80050cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	e000ed00 	.word	0xe000ed00
 80052a8:	410fc271 	.word	0x410fc271
 80052ac:	410fc270 	.word	0x410fc270
 80052b0:	e000e400 	.word	0xe000e400
 80052b4:	20000f48 	.word	0x20000f48
 80052b8:	20000f4c 	.word	0x20000f4c
 80052bc:	e000ed20 	.word	0xe000ed20
 80052c0:	20000068 	.word	0x20000068
 80052c4:	e000ef34 	.word	0xe000ef34

080052c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	607b      	str	r3, [r7, #4]
}
 80052e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052e2:	4b10      	ldr	r3, [pc, #64]	@ (8005324 <vPortEnterCritical+0x5c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3301      	adds	r3, #1
 80052e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005324 <vPortEnterCritical+0x5c>)
 80052ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <vPortEnterCritical+0x5c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d110      	bne.n	8005316 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <vPortEnterCritical+0x60>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <vPortEnterCritical+0x4e>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	603b      	str	r3, [r7, #0]
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	e7fd      	b.n	8005312 <vPortEnterCritical+0x4a>
	}
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000068 	.word	0x20000068
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005332:	4b12      	ldr	r3, [pc, #72]	@ (800537c <vPortExitCritical+0x50>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10b      	bne.n	8005352 <vPortExitCritical+0x26>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	607b      	str	r3, [r7, #4]
}
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	e7fd      	b.n	800534e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005352:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <vPortExitCritical+0x50>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3b01      	subs	r3, #1
 8005358:	4a08      	ldr	r2, [pc, #32]	@ (800537c <vPortExitCritical+0x50>)
 800535a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800535c:	4b07      	ldr	r3, [pc, #28]	@ (800537c <vPortExitCritical+0x50>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <vPortExitCritical+0x44>
 8005364:	2300      	movs	r3, #0
 8005366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f383 8811 	msr	BASEPRI, r3
}
 800536e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	20000068 	.word	0x20000068

08005380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005380:	f3ef 8009 	mrs	r0, PSP
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	4b15      	ldr	r3, [pc, #84]	@ (80053e0 <pxCurrentTCBConst>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	f01e 0f10 	tst.w	lr, #16
 8005390:	bf08      	it	eq
 8005392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539a:	6010      	str	r0, [r2, #0]
 800539c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80053a4:	f380 8811 	msr	BASEPRI, r0
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f7fe ff9e 	bl	80042f0 <vTaskSwitchContext>
 80053b4:	f04f 0000 	mov.w	r0, #0
 80053b8:	f380 8811 	msr	BASEPRI, r0
 80053bc:	bc09      	pop	{r0, r3}
 80053be:	6819      	ldr	r1, [r3, #0]
 80053c0:	6808      	ldr	r0, [r1, #0]
 80053c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c6:	f01e 0f10 	tst.w	lr, #16
 80053ca:	bf08      	it	eq
 80053cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053d0:	f380 8809 	msr	PSP, r0
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	f3af 8000 	nop.w

080053e0 <pxCurrentTCBConst>:
 80053e0:	2000091c 	.word	0x2000091c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	607b      	str	r3, [r7, #4]
}
 8005400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005402:	f7fe febb 	bl	800417c <xTaskIncrementTick>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800540c:	4b06      	ldr	r3, [pc, #24]	@ (8005428 <xPortSysTickHandler+0x40>)
 800540e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	2300      	movs	r3, #0
 8005416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f383 8811 	msr	BASEPRI, r3
}
 800541e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <vPortSetupTimerInterrupt+0x34>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005436:	4b0b      	ldr	r3, [pc, #44]	@ (8005464 <vPortSetupTimerInterrupt+0x38>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800543c:	4b0a      	ldr	r3, [pc, #40]	@ (8005468 <vPortSetupTimerInterrupt+0x3c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a0a      	ldr	r2, [pc, #40]	@ (800546c <vPortSetupTimerInterrupt+0x40>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	099b      	lsrs	r3, r3, #6
 8005448:	4a09      	ldr	r2, [pc, #36]	@ (8005470 <vPortSetupTimerInterrupt+0x44>)
 800544a:	3b01      	subs	r3, #1
 800544c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800544e:	4b04      	ldr	r3, [pc, #16]	@ (8005460 <vPortSetupTimerInterrupt+0x34>)
 8005450:	2207      	movs	r2, #7
 8005452:	601a      	str	r2, [r3, #0]
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	e000e010 	.word	0xe000e010
 8005464:	e000e018 	.word	0xe000e018
 8005468:	2000005c 	.word	0x2000005c
 800546c:	10624dd3 	.word	0x10624dd3
 8005470:	e000e014 	.word	0xe000e014

08005474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005474:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005484 <vPortEnableVFP+0x10>
 8005478:	6801      	ldr	r1, [r0, #0]
 800547a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800547e:	6001      	str	r1, [r0, #0]
 8005480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005482:	bf00      	nop
 8005484:	e000ed88 	.word	0xe000ed88

08005488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800548e:	f3ef 8305 	mrs	r3, IPSR
 8005492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b0f      	cmp	r3, #15
 8005498:	d915      	bls.n	80054c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800549a:	4a18      	ldr	r2, [pc, #96]	@ (80054fc <vPortValidateInterruptPriority+0x74>)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054a4:	4b16      	ldr	r3, [pc, #88]	@ (8005500 <vPortValidateInterruptPriority+0x78>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	7afa      	ldrb	r2, [r7, #11]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d20b      	bcs.n	80054c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	607b      	str	r3, [r7, #4]
}
 80054c0:	bf00      	nop
 80054c2:	bf00      	nop
 80054c4:	e7fd      	b.n	80054c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005504 <vPortValidateInterruptPriority+0x7c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005508 <vPortValidateInterruptPriority+0x80>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d90b      	bls.n	80054ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	603b      	str	r3, [r7, #0]
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	e7fd      	b.n	80054ea <vPortValidateInterruptPriority+0x62>
	}
 80054ee:	bf00      	nop
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	e000e3f0 	.word	0xe000e3f0
 8005500:	20000f48 	.word	0x20000f48
 8005504:	e000ed0c 	.word	0xe000ed0c
 8005508:	20000f4c 	.word	0x20000f4c

0800550c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	@ 0x28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005518:	f7fe fd74 	bl	8004004 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800551c:	4b5c      	ldr	r3, [pc, #368]	@ (8005690 <pvPortMalloc+0x184>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005524:	f000 f924 	bl	8005770 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005528:	4b5a      	ldr	r3, [pc, #360]	@ (8005694 <pvPortMalloc+0x188>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4013      	ands	r3, r2
 8005530:	2b00      	cmp	r3, #0
 8005532:	f040 8095 	bne.w	8005660 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01e      	beq.n	800557a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800553c:	2208      	movs	r2, #8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4413      	add	r3, r2
 8005542:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	2b00      	cmp	r3, #0
 800554c:	d015      	beq.n	800557a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f023 0307 	bic.w	r3, r3, #7
 8005554:	3308      	adds	r3, #8
 8005556:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <pvPortMalloc+0x6e>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	617b      	str	r3, [r7, #20]
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	e7fd      	b.n	8005576 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d06f      	beq.n	8005660 <pvPortMalloc+0x154>
 8005580:	4b45      	ldr	r3, [pc, #276]	@ (8005698 <pvPortMalloc+0x18c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	429a      	cmp	r2, r3
 8005588:	d86a      	bhi.n	8005660 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800558a:	4b44      	ldr	r3, [pc, #272]	@ (800569c <pvPortMalloc+0x190>)
 800558c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800558e:	4b43      	ldr	r3, [pc, #268]	@ (800569c <pvPortMalloc+0x190>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005594:	e004      	b.n	80055a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d903      	bls.n	80055b2 <pvPortMalloc+0xa6>
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f1      	bne.n	8005596 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055b2:	4b37      	ldr	r3, [pc, #220]	@ (8005690 <pvPortMalloc+0x184>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d051      	beq.n	8005660 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2208      	movs	r2, #8
 80055c2:	4413      	add	r3, r2
 80055c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	1ad2      	subs	r2, r2, r3
 80055d6:	2308      	movs	r3, #8
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	429a      	cmp	r2, r3
 80055dc:	d920      	bls.n	8005620 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00b      	beq.n	8005608 <pvPortMalloc+0xfc>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	613b      	str	r3, [r7, #16]
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	1ad2      	subs	r2, r2, r3
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800561a:	69b8      	ldr	r0, [r7, #24]
 800561c:	f000 f90a 	bl	8005834 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005620:	4b1d      	ldr	r3, [pc, #116]	@ (8005698 <pvPortMalloc+0x18c>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	4a1b      	ldr	r2, [pc, #108]	@ (8005698 <pvPortMalloc+0x18c>)
 800562c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800562e:	4b1a      	ldr	r3, [pc, #104]	@ (8005698 <pvPortMalloc+0x18c>)
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4b1b      	ldr	r3, [pc, #108]	@ (80056a0 <pvPortMalloc+0x194>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d203      	bcs.n	8005642 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800563a:	4b17      	ldr	r3, [pc, #92]	@ (8005698 <pvPortMalloc+0x18c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a18      	ldr	r2, [pc, #96]	@ (80056a0 <pvPortMalloc+0x194>)
 8005640:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	4b13      	ldr	r3, [pc, #76]	@ (8005694 <pvPortMalloc+0x188>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	431a      	orrs	r2, r3
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005656:	4b13      	ldr	r3, [pc, #76]	@ (80056a4 <pvPortMalloc+0x198>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3301      	adds	r3, #1
 800565c:	4a11      	ldr	r2, [pc, #68]	@ (80056a4 <pvPortMalloc+0x198>)
 800565e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005660:	f7fe fcde 	bl	8004020 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00b      	beq.n	8005686 <pvPortMalloc+0x17a>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	60fb      	str	r3, [r7, #12]
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	e7fd      	b.n	8005682 <pvPortMalloc+0x176>
	return pvReturn;
 8005686:	69fb      	ldr	r3, [r7, #28]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3728      	adds	r7, #40	@ 0x28
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20004b58 	.word	0x20004b58
 8005694:	20004b6c 	.word	0x20004b6c
 8005698:	20004b5c 	.word	0x20004b5c
 800569c:	20004b50 	.word	0x20004b50
 80056a0:	20004b60 	.word	0x20004b60
 80056a4:	20004b64 	.word	0x20004b64

080056a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d04f      	beq.n	800575a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056ba:	2308      	movs	r3, #8
 80056bc:	425b      	negs	r3, r3
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4413      	add	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	4b25      	ldr	r3, [pc, #148]	@ (8005764 <vPortFree+0xbc>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4013      	ands	r3, r2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <vPortFree+0x46>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	60fb      	str	r3, [r7, #12]
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	e7fd      	b.n	80056ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <vPortFree+0x66>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	60bb      	str	r3, [r7, #8]
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	e7fd      	b.n	800570a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	4b14      	ldr	r3, [pc, #80]	@ (8005764 <vPortFree+0xbc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4013      	ands	r3, r2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01e      	beq.n	800575a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d11a      	bne.n	800575a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	4b0e      	ldr	r3, [pc, #56]	@ (8005764 <vPortFree+0xbc>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	43db      	mvns	r3, r3
 800572e:	401a      	ands	r2, r3
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005734:	f7fe fc66 	bl	8004004 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <vPortFree+0xc0>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4413      	add	r3, r2
 8005742:	4a09      	ldr	r2, [pc, #36]	@ (8005768 <vPortFree+0xc0>)
 8005744:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005746:	6938      	ldr	r0, [r7, #16]
 8005748:	f000 f874 	bl	8005834 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800574c:	4b07      	ldr	r3, [pc, #28]	@ (800576c <vPortFree+0xc4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3301      	adds	r3, #1
 8005752:	4a06      	ldr	r2, [pc, #24]	@ (800576c <vPortFree+0xc4>)
 8005754:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005756:	f7fe fc63 	bl	8004020 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800575a:	bf00      	nop
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20004b6c 	.word	0x20004b6c
 8005768:	20004b5c 	.word	0x20004b5c
 800576c:	20004b68 	.word	0x20004b68

08005770 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005776:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800577a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800577c:	4b27      	ldr	r3, [pc, #156]	@ (800581c <prvHeapInit+0xac>)
 800577e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00c      	beq.n	80057a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3307      	adds	r3, #7
 800578e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0307 	bic.w	r3, r3, #7
 8005796:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	4a1f      	ldr	r2, [pc, #124]	@ (800581c <prvHeapInit+0xac>)
 80057a0:	4413      	add	r3, r2
 80057a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005820 <prvHeapInit+0xb0>)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005820 <prvHeapInit+0xb0>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4413      	add	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057bc:	2208      	movs	r2, #8
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0307 	bic.w	r3, r3, #7
 80057ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4a15      	ldr	r2, [pc, #84]	@ (8005824 <prvHeapInit+0xb4>)
 80057d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057d2:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <prvHeapInit+0xb4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2200      	movs	r2, #0
 80057d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057da:	4b12      	ldr	r3, [pc, #72]	@ (8005824 <prvHeapInit+0xb4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	1ad2      	subs	r2, r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005824 <prvHeapInit+0xb4>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005828 <prvHeapInit+0xb8>)
 80057fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4a09      	ldr	r2, [pc, #36]	@ (800582c <prvHeapInit+0xbc>)
 8005806:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005808:	4b09      	ldr	r3, [pc, #36]	@ (8005830 <prvHeapInit+0xc0>)
 800580a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800580e:	601a      	str	r2, [r3, #0]
}
 8005810:	bf00      	nop
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	20000f50 	.word	0x20000f50
 8005820:	20004b50 	.word	0x20004b50
 8005824:	20004b58 	.word	0x20004b58
 8005828:	20004b60 	.word	0x20004b60
 800582c:	20004b5c 	.word	0x20004b5c
 8005830:	20004b6c 	.word	0x20004b6c

08005834 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800583c:	4b28      	ldr	r3, [pc, #160]	@ (80058e0 <prvInsertBlockIntoFreeList+0xac>)
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	e002      	b.n	8005848 <prvInsertBlockIntoFreeList+0x14>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	429a      	cmp	r2, r3
 8005850:	d8f7      	bhi.n	8005842 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4413      	add	r3, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	429a      	cmp	r2, r3
 8005862:	d108      	bne.n	8005876 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	441a      	add	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	441a      	add	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d118      	bne.n	80058bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b15      	ldr	r3, [pc, #84]	@ (80058e4 <prvInsertBlockIntoFreeList+0xb0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d00d      	beq.n	80058b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	441a      	add	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	e008      	b.n	80058c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058b2:	4b0c      	ldr	r3, [pc, #48]	@ (80058e4 <prvInsertBlockIntoFreeList+0xb0>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e003      	b.n	80058c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d002      	beq.n	80058d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058d2:	bf00      	nop
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20004b50 	.word	0x20004b50
 80058e4:	20004b58 	.word	0x20004b58

080058e8 <memset>:
 80058e8:	4402      	add	r2, r0
 80058ea:	4603      	mov	r3, r0
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d100      	bne.n	80058f2 <memset+0xa>
 80058f0:	4770      	bx	lr
 80058f2:	f803 1b01 	strb.w	r1, [r3], #1
 80058f6:	e7f9      	b.n	80058ec <memset+0x4>

080058f8 <_reclaim_reent>:
 80058f8:	4b29      	ldr	r3, [pc, #164]	@ (80059a0 <_reclaim_reent+0xa8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4283      	cmp	r3, r0
 80058fe:	b570      	push	{r4, r5, r6, lr}
 8005900:	4604      	mov	r4, r0
 8005902:	d04b      	beq.n	800599c <_reclaim_reent+0xa4>
 8005904:	69c3      	ldr	r3, [r0, #28]
 8005906:	b1ab      	cbz	r3, 8005934 <_reclaim_reent+0x3c>
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	b16b      	cbz	r3, 8005928 <_reclaim_reent+0x30>
 800590c:	2500      	movs	r5, #0
 800590e:	69e3      	ldr	r3, [r4, #28]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	5959      	ldr	r1, [r3, r5]
 8005914:	2900      	cmp	r1, #0
 8005916:	d13b      	bne.n	8005990 <_reclaim_reent+0x98>
 8005918:	3504      	adds	r5, #4
 800591a:	2d80      	cmp	r5, #128	@ 0x80
 800591c:	d1f7      	bne.n	800590e <_reclaim_reent+0x16>
 800591e:	69e3      	ldr	r3, [r4, #28]
 8005920:	4620      	mov	r0, r4
 8005922:	68d9      	ldr	r1, [r3, #12]
 8005924:	f000 f872 	bl	8005a0c <_free_r>
 8005928:	69e3      	ldr	r3, [r4, #28]
 800592a:	6819      	ldr	r1, [r3, #0]
 800592c:	b111      	cbz	r1, 8005934 <_reclaim_reent+0x3c>
 800592e:	4620      	mov	r0, r4
 8005930:	f000 f86c 	bl	8005a0c <_free_r>
 8005934:	6961      	ldr	r1, [r4, #20]
 8005936:	b111      	cbz	r1, 800593e <_reclaim_reent+0x46>
 8005938:	4620      	mov	r0, r4
 800593a:	f000 f867 	bl	8005a0c <_free_r>
 800593e:	69e1      	ldr	r1, [r4, #28]
 8005940:	b111      	cbz	r1, 8005948 <_reclaim_reent+0x50>
 8005942:	4620      	mov	r0, r4
 8005944:	f000 f862 	bl	8005a0c <_free_r>
 8005948:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800594a:	b111      	cbz	r1, 8005952 <_reclaim_reent+0x5a>
 800594c:	4620      	mov	r0, r4
 800594e:	f000 f85d 	bl	8005a0c <_free_r>
 8005952:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005954:	b111      	cbz	r1, 800595c <_reclaim_reent+0x64>
 8005956:	4620      	mov	r0, r4
 8005958:	f000 f858 	bl	8005a0c <_free_r>
 800595c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800595e:	b111      	cbz	r1, 8005966 <_reclaim_reent+0x6e>
 8005960:	4620      	mov	r0, r4
 8005962:	f000 f853 	bl	8005a0c <_free_r>
 8005966:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005968:	b111      	cbz	r1, 8005970 <_reclaim_reent+0x78>
 800596a:	4620      	mov	r0, r4
 800596c:	f000 f84e 	bl	8005a0c <_free_r>
 8005970:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005972:	b111      	cbz	r1, 800597a <_reclaim_reent+0x82>
 8005974:	4620      	mov	r0, r4
 8005976:	f000 f849 	bl	8005a0c <_free_r>
 800597a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800597c:	b111      	cbz	r1, 8005984 <_reclaim_reent+0x8c>
 800597e:	4620      	mov	r0, r4
 8005980:	f000 f844 	bl	8005a0c <_free_r>
 8005984:	6a23      	ldr	r3, [r4, #32]
 8005986:	b14b      	cbz	r3, 800599c <_reclaim_reent+0xa4>
 8005988:	4620      	mov	r0, r4
 800598a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800598e:	4718      	bx	r3
 8005990:	680e      	ldr	r6, [r1, #0]
 8005992:	4620      	mov	r0, r4
 8005994:	f000 f83a 	bl	8005a0c <_free_r>
 8005998:	4631      	mov	r1, r6
 800599a:	e7bb      	b.n	8005914 <_reclaim_reent+0x1c>
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	bf00      	nop
 80059a0:	2000006c 	.word	0x2000006c

080059a4 <__libc_init_array>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	4d0d      	ldr	r5, [pc, #52]	@ (80059dc <__libc_init_array+0x38>)
 80059a8:	4c0d      	ldr	r4, [pc, #52]	@ (80059e0 <__libc_init_array+0x3c>)
 80059aa:	1b64      	subs	r4, r4, r5
 80059ac:	10a4      	asrs	r4, r4, #2
 80059ae:	2600      	movs	r6, #0
 80059b0:	42a6      	cmp	r6, r4
 80059b2:	d109      	bne.n	80059c8 <__libc_init_array+0x24>
 80059b4:	4d0b      	ldr	r5, [pc, #44]	@ (80059e4 <__libc_init_array+0x40>)
 80059b6:	4c0c      	ldr	r4, [pc, #48]	@ (80059e8 <__libc_init_array+0x44>)
 80059b8:	f000 f87e 	bl	8005ab8 <_init>
 80059bc:	1b64      	subs	r4, r4, r5
 80059be:	10a4      	asrs	r4, r4, #2
 80059c0:	2600      	movs	r6, #0
 80059c2:	42a6      	cmp	r6, r4
 80059c4:	d105      	bne.n	80059d2 <__libc_init_array+0x2e>
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
 80059c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059cc:	4798      	blx	r3
 80059ce:	3601      	adds	r6, #1
 80059d0:	e7ee      	b.n	80059b0 <__libc_init_array+0xc>
 80059d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d6:	4798      	blx	r3
 80059d8:	3601      	adds	r6, #1
 80059da:	e7f2      	b.n	80059c2 <__libc_init_array+0x1e>
 80059dc:	08005c64 	.word	0x08005c64
 80059e0:	08005c64 	.word	0x08005c64
 80059e4:	08005c64 	.word	0x08005c64
 80059e8:	08005c68 	.word	0x08005c68

080059ec <__retarget_lock_acquire_recursive>:
 80059ec:	4770      	bx	lr

080059ee <__retarget_lock_release_recursive>:
 80059ee:	4770      	bx	lr

080059f0 <memcpy>:
 80059f0:	440a      	add	r2, r1
 80059f2:	4291      	cmp	r1, r2
 80059f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059f8:	d100      	bne.n	80059fc <memcpy+0xc>
 80059fa:	4770      	bx	lr
 80059fc:	b510      	push	{r4, lr}
 80059fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a06:	4291      	cmp	r1, r2
 8005a08:	d1f9      	bne.n	80059fe <memcpy+0xe>
 8005a0a:	bd10      	pop	{r4, pc}

08005a0c <_free_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4605      	mov	r5, r0
 8005a10:	2900      	cmp	r1, #0
 8005a12:	d041      	beq.n	8005a98 <_free_r+0x8c>
 8005a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a18:	1f0c      	subs	r4, r1, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	bfb8      	it	lt
 8005a1e:	18e4      	addlt	r4, r4, r3
 8005a20:	f000 f83e 	bl	8005aa0 <__malloc_lock>
 8005a24:	4a1d      	ldr	r2, [pc, #116]	@ (8005a9c <_free_r+0x90>)
 8005a26:	6813      	ldr	r3, [r2, #0]
 8005a28:	b933      	cbnz	r3, 8005a38 <_free_r+0x2c>
 8005a2a:	6063      	str	r3, [r4, #4]
 8005a2c:	6014      	str	r4, [r2, #0]
 8005a2e:	4628      	mov	r0, r5
 8005a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a34:	f000 b83a 	b.w	8005aac <__malloc_unlock>
 8005a38:	42a3      	cmp	r3, r4
 8005a3a:	d908      	bls.n	8005a4e <_free_r+0x42>
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	1821      	adds	r1, r4, r0
 8005a40:	428b      	cmp	r3, r1
 8005a42:	bf01      	itttt	eq
 8005a44:	6819      	ldreq	r1, [r3, #0]
 8005a46:	685b      	ldreq	r3, [r3, #4]
 8005a48:	1809      	addeq	r1, r1, r0
 8005a4a:	6021      	streq	r1, [r4, #0]
 8005a4c:	e7ed      	b.n	8005a2a <_free_r+0x1e>
 8005a4e:	461a      	mov	r2, r3
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	b10b      	cbz	r3, 8005a58 <_free_r+0x4c>
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	d9fa      	bls.n	8005a4e <_free_r+0x42>
 8005a58:	6811      	ldr	r1, [r2, #0]
 8005a5a:	1850      	adds	r0, r2, r1
 8005a5c:	42a0      	cmp	r0, r4
 8005a5e:	d10b      	bne.n	8005a78 <_free_r+0x6c>
 8005a60:	6820      	ldr	r0, [r4, #0]
 8005a62:	4401      	add	r1, r0
 8005a64:	1850      	adds	r0, r2, r1
 8005a66:	4283      	cmp	r3, r0
 8005a68:	6011      	str	r1, [r2, #0]
 8005a6a:	d1e0      	bne.n	8005a2e <_free_r+0x22>
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	6053      	str	r3, [r2, #4]
 8005a72:	4408      	add	r0, r1
 8005a74:	6010      	str	r0, [r2, #0]
 8005a76:	e7da      	b.n	8005a2e <_free_r+0x22>
 8005a78:	d902      	bls.n	8005a80 <_free_r+0x74>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	602b      	str	r3, [r5, #0]
 8005a7e:	e7d6      	b.n	8005a2e <_free_r+0x22>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	1821      	adds	r1, r4, r0
 8005a84:	428b      	cmp	r3, r1
 8005a86:	bf04      	itt	eq
 8005a88:	6819      	ldreq	r1, [r3, #0]
 8005a8a:	685b      	ldreq	r3, [r3, #4]
 8005a8c:	6063      	str	r3, [r4, #4]
 8005a8e:	bf04      	itt	eq
 8005a90:	1809      	addeq	r1, r1, r0
 8005a92:	6021      	streq	r1, [r4, #0]
 8005a94:	6054      	str	r4, [r2, #4]
 8005a96:	e7ca      	b.n	8005a2e <_free_r+0x22>
 8005a98:	bd38      	pop	{r3, r4, r5, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20004cac 	.word	0x20004cac

08005aa0 <__malloc_lock>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	@ (8005aa8 <__malloc_lock+0x8>)
 8005aa2:	f7ff bfa3 	b.w	80059ec <__retarget_lock_acquire_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	20004ca8 	.word	0x20004ca8

08005aac <__malloc_unlock>:
 8005aac:	4801      	ldr	r0, [pc, #4]	@ (8005ab4 <__malloc_unlock+0x8>)
 8005aae:	f7ff bf9e 	b.w	80059ee <__retarget_lock_release_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	20004ca8 	.word	0x20004ca8

08005ab8 <_init>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	bf00      	nop
 8005abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005abe:	bc08      	pop	{r3}
 8005ac0:	469e      	mov	lr, r3
 8005ac2:	4770      	bx	lr

08005ac4 <_fini>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	bf00      	nop
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr
